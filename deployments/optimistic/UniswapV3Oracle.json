{
  "address": "0x54431918cEC22932fCF97E54769F4E00f646690F",
  "abi": [
    {
      "inputs": [],
      "name": "FACTORY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL_INIT_CODE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "dstToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "connector",
          "type": "address"
        }
      ],
      "name": "getRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "dstToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "connector",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        }
      ],
      "name": "getRateForFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xece82c5c8c43062b5b942a94c1e99b643bde798ad626b86f5a663f73a6841dad",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0x54431918cEC22932fCF97E54769F4E00f646690F",
    "transactionIndex": 0,
    "gasUsed": "1979574",
    "logsBloom": "0x
    "blockHash": "0xe4eccb3d0327eaef2e626a44463343facd78cbcd300bbb548723901e435b1857",
    "transactionHash": "0xece82c5c8c43062b5b942a94c1e99b643bde798ad626b86f5a663f73a6841dad",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 355416,
        "transactionHash": "0xece82c5c8c43062b5b942a94c1e99b643bde798ad626b86f5a663f73a6841dad",
        "address": "0x4200000000000000000000000000000000000006",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47",
          "0x0000000000000000000000004200000000000000000000000000000000000011"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000094e3dbdd1a2c0",
        "logIndex": 0,
        "blockHash": "0xe4eccb3d0327eaef2e626a44463343facd78cbcd300bbb548723901e435b1857"
      }
    ],
    "blockNumber": 355416,
    "cumulativeGasUsed": "1979574",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "958ec0ad7ac6ea52f588a94084fc4cce",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6-ci.2021.5.11+ovm+commit.3b061308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_INIT_CODE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"getRateForFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/UniswapV3Oracle.sol\":\"UniswapV3Oracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf89f005a3d98f7768cdee2583707db0ac725cf567d455751af32ee68132f3db3\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IOracle {\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external view returns (uint256 rate, uint256 weight);\\n}\\n\",\"keccak256\":\"0x108abc1d8fff266112dbbc6838ae1439af64aa4fd2a13aacb3e974f6b5690f15\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IUniswapV3Pool {\\n    function slot0() external view returns (uint160 sqrtPriceX96, int24, uint16, uint16, uint16, uint8, bool);\\n    function token0() external view returns (IERC20 token);\\n}\\n\",\"keccak256\":\"0xe0cbf0fc52087ef9581358245b5c3f52c7198325ebe4c04c0fbef4147633eb9e\",\"license\":\"MIT\"},\"contracts/libraries/Sqrt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n\\nlibrary Sqrt {\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2e8ce5631cbb49ca51da7c90d5313cfff9712ec4a9e47a37fd91dacd033deca0\",\"license\":\"MIT\"},\"contracts/oracles/UniswapV3Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"../libraries/Sqrt.sol\\\";\\n\\n\\ncontract UniswapV3Oracle is IOracle {\\n    using Address for address;\\n    using SafeMath for uint256;\\n    using Sqrt for uint256;\\n\\n    bytes32 public constant POOL_INIT_CODE_HASH = 0x0c231002d0970d2126e7e00ce88c3b0e5ec8e48dac71478d56245c34ea2f9447;\\n    address public constant FACTORY = 0x1F98431c8aD98523631AE4a59f267346ea31F984;\\n    IERC20 private constant _NONE = IERC20(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external override view returns (uint256 rate, uint256 weight) {\\n        uint24[3] memory fees = [uint24(500), 3000, 10000];\\n        for (uint256 i = 0; i < 3; i++) {\\n            (uint256 rateForFee, uint256 weightForFee) = getRateForFee(srcToken, dstToken, connector, fees[i]);\\n            rate = rate.add(rateForFee.mul(weightForFee));\\n            weight = weight.add(weightForFee);\\n        }\\n        if (weight > 0) {\\n            rate = rate.div(weight);\\n            weight = weight.sqrt();\\n        }\\n    }\\n\\n    // @dev fee in ppm (e.g. 3000 for 0.3% fee)\\n    function getRateForFee(IERC20 srcToken, IERC20 dstToken, IERC20 connector, uint24 fee) public view returns (uint256 rate, uint256 weight) {\\n        uint256 balance0;\\n        uint256 balance1;\\n        if (connector == _NONE) {\\n            (rate, balance0, balance1) = _getRate(srcToken, dstToken, fee);\\n        } else {\\n            uint256 balanceConnector0;\\n            uint256 balanceConnector1;\\n            uint256 rate0;\\n            uint256 rate1;\\n            (rate0, balance0, balanceConnector0) = _getRate(srcToken, connector, fee);\\n            if (balance0 == 0 || balanceConnector0 == 0) {\\n                return (0, 0);\\n            }\\n            (rate1, balanceConnector1, balance1) = _getRate(connector, dstToken, fee);\\n            if (balanceConnector1 == 0 || balance1 == 0) {\\n                return (0, 0);\\n            }\\n\\n            if (balanceConnector0 > balanceConnector1) {\\n                balance0 = balance0.mul(balanceConnector1).div(balanceConnector0);\\n            } else {\\n                balance1 = balance1.mul(balanceConnector0).div(balanceConnector1);\\n            }\\n\\n            rate = rate0.mul(rate1).div(1e18);\\n        }\\n\\n        weight = balance0.mul(balance1);\\n    }\\n\\n    function _getRate(IERC20 srcToken, IERC20 dstToken, uint24 fee) internal view returns (uint256 rate, uint256 srcBalance, uint256 dstBalance) {\\n        (IERC20 token0, IERC20 token1) = srcToken < dstToken ? (srcToken, dstToken) : (dstToken, srcToken);\\n        address pool = _getPool(address(token0), address(token1), fee);\\n        if (!pool.isContract()) {\\n            return (0, 0, 0);\\n        }\\n        (uint256 sqrtPriceX96,,,,,,) = IUniswapV3Pool(pool).slot0();\\n        if (srcToken == token0) {\\n            rate = (uint256(1e18).mul(sqrtPriceX96) >> 96).mul(sqrtPriceX96) >> 96;\\n        } else {\\n            rate = uint256(1e18 << 192).div(sqrtPriceX96).div(sqrtPriceX96);\\n        }\\n        srcBalance = srcToken.balanceOf(address(pool));\\n        dstBalance = dstToken.balanceOf(address(pool));\\n    }\\n\\n    function _getPool(address token0, address token1, uint24 fee) private pure returns (address) {\\n        return address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex'ff',\\n                        FACTORY,\\n                        keccak256(abi.encode(token0, token1, fee)),\\n                        POOL_INIT_CODE_HASH\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xf89078c22ab4a1a345a3588a163a103e6aab279cc1deb77ed1018f42f8914011\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040525a61000d610027565b80156100215760008061001e610081565b50505b506100ec565b63a8c4c5ec598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b604081101561007c57600082820152602001610065565b505050565b632a2a7adb598160e01b8152600481016020815285602082015260005b868110156100b957808601518282016040015260200161009e565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b610c8e806100fb6000396000f3fe60806040525a61000d610a70565b80156100215760008061001e610aca565b50505b506004361061005d5760003560e01c806314999e791461006b5780632dd31000146100d15780636c9e524914610102578063dc6fd8ab1461015a575b600080610068610aca565b50505b6100b96004803603606081101561008a57600080610087610aca565b50505b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160409091013516610174565b60405191825260208201526040908101905180910390f35b6100d961021f565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100b9600480360360808110156101215760008061011e610aca565b50505b50803573ffffffffffffffffffffffffffffffffffffffff908116916020810135821691604082013516906060013562ffffff16610237565b610162610347565b60405190815260200160405180910390f35b60008060006040516060810160409081526101f48252610bb8602083015261271090820152905060005b60038110156101f7576000806101c68989898787600381106101bc57fe5b6020020151610237565b90925090506101df6101d8838361036b565b87906103f0565b95506101eb85826103f0565b9450505060010161019e565b508115610216576102088383610469565b9250610213826104f2565b91505b50935093915050565b731f98431c8ad98523631ae4a59f267346ea31f98481565b600080808073ffffffffffffffffffffffffffffffffffffffff868116141561027157610265888887610544565b9195509250905061032f565b6000806000806102828c8b8b610544565b90975094509150851580610294575083155b156102ab576000809750975050505050505061033e565b6102b68a8c8b610544565b9650935090508215806102c7575084155b156102de576000809750975050505050505061033e565b82841115610301576102fa846102f4888661036b565b90610469565b9550610312565b61030f836102f4878761036b565b94505b610328670de0b6b3a76400006102f4848461036b565b9750505050505b610339828261036b565b925050505b94509492505050565b7f0c231002d0970d2126e7e00ce88c3b0e5ec8e48dac71478d56245c34ea2f944781565b60008261037a575060006103ea565b8282028284828161038757fe5b04146103e7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180610c6d60219139604001915050604051809103906103e4610aca565b50505b90505b92915050565b6000828201838110156103e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401604051809103906103e4610aca565b60008082116104e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f0000000000006044820152606401604051809103906104de610aca565b50505b8183816104ea57fe5b049392505050565b60006003821115610535575080600160028204015b8181101561052f5780915060028182858161051e57fe5b04018161052757fe5b049050610507565b5061053f565b811561053f575060015b919050565b60008060008060008673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1610610586578688610589565b87875b91509150600061059a838389610937565b90506105bb8173ffffffffffffffffffffffffffffffffffffffff16610a5b565b6105d257600080600095509550955050505061092e565b60008173ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e0604051808303818680610615610b35565b15801561062a57600080610627610aca565b50505b505a610634610b81565b5050505050158015610653573d6000803e3d6000610650610aca565b50505b505050506040513d60e08110156106725760008061066f610aca565b50505b810190808051929190602001805192919060200180519291906020018051929190602001805192919060200180519291906020018051906020019092919050505050505050505073ffffffffffffffffffffffffffffffffffffffff1690508373ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16141561072f576060610726828261071e670de0b6b3a76400008361036b565b901c9061036b565b901c9650610760565b61075d816102f47f0de0b6b3a764000000000000000000000000000000000000000000000000000082610469565b96505b8973ffffffffffffffffffffffffffffffffffffffff166370a08231836040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260240160206040518083038186806107dc610b35565b1580156107f1576000806107ee610aca565b50505b505a6107fb610b81565b505050505015801561081a573d6000803e3d6000610817610aca565b50505b505050506040513d602081101561083957600080610836610aca565b50505b8101908080519850505073ffffffffffffffffffffffffffffffffffffffff8a1690506370a08231836040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260240160206040518083038186806108c1610b35565b1580156108d6576000806108d3610aca565b50505b505a6108e0610b81565b50505050501580156108ff573d6000803e3d60006108fc610aca565b50505b505050506040513d602081101561091e5760008061091b610aca565b50505b8101908080519750505050505050505b93509350939050565b6000731f98431c8ad98523631ae4a59f267346ea31f984848484604051602001808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018262ffffff1681526020019350505050604051602081830303815290604052805190602001207f0c231002d0970d2126e7e00ce88c3b0e5ec8e48dac71478d56245c34ea2f94476040517fff00000000000000000000000000000000000000000000000000000000000000602082015260609390931b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660218401526035830191909152605582015260750160405160208183030381529060405280519060200120949350505050565b60008082610a67610b35565b15159392505050565b63a8c4c5ec598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015610ac557600082820152602001610aae565b505050565b632a2a7adb598160e01b8152600481016020815285602082015260005b86811015610b02578086015182820160400152602001610ae7565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020610aae565b638540661f598160e01b8152610bb2565b80808311156103ea575090919050565b80808310156103ea575090919050565b836004820152846024820152606060448201528660648201526084810160005b88811015610bea578088015182820152602001610bd2565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af15059610c3f8d3d610ba2565b8c01610c4b8187610b92565b5b82811015610c605760008152602001610c4c565b50929c5050505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
  "deployedBytecode": "0x60806040525a61000d610a70565b80156100215760008061001e610aca565b50505b506004361061005d5760003560e01c806314999e791461006b5780632dd31000146100d15780636c9e524914610102578063dc6fd8ab1461015a575b600080610068610aca565b50505b6100b96004803603606081101561008a57600080610087610aca565b50505b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160409091013516610174565b60405191825260208201526040908101905180910390f35b6100d961021f565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100b9600480360360808110156101215760008061011e610aca565b50505b50803573ffffffffffffffffffffffffffffffffffffffff908116916020810135821691604082013516906060013562ffffff16610237565b610162610347565b60405190815260200160405180910390f35b60008060006040516060810160409081526101f48252610bb8602083015261271090820152905060005b60038110156101f7576000806101c68989898787600381106101bc57fe5b6020020151610237565b90925090506101df6101d8838361036b565b87906103f0565b95506101eb85826103f0565b9450505060010161019e565b508115610216576102088383610469565b9250610213826104f2565b91505b50935093915050565b731f98431c8ad98523631ae4a59f267346ea31f98481565b600080808073ffffffffffffffffffffffffffffffffffffffff868116141561027157610265888887610544565b9195509250905061032f565b6000806000806102828c8b8b610544565b90975094509150851580610294575083155b156102ab576000809750975050505050505061033e565b6102b68a8c8b610544565b9650935090508215806102c7575084155b156102de576000809750975050505050505061033e565b82841115610301576102fa846102f4888661036b565b90610469565b9550610312565b61030f836102f4878761036b565b94505b610328670de0b6b3a76400006102f4848461036b565b9750505050505b610339828261036b565b925050505b94509492505050565b7f0c231002d0970d2126e7e00ce88c3b0e5ec8e48dac71478d56245c34ea2f944781565b60008261037a575060006103ea565b8282028284828161038757fe5b04146103e7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180610c6d60219139604001915050604051809103906103e4610aca565b50505b90505b92915050565b6000828201838110156103e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401604051809103906103e4610aca565b60008082116104e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f0000000000006044820152606401604051809103906104de610aca565b50505b8183816104ea57fe5b049392505050565b60006003821115610535575080600160028204015b8181101561052f5780915060028182858161051e57fe5b04018161052757fe5b049050610507565b5061053f565b811561053f575060015b919050565b60008060008060008673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1610610586578688610589565b87875b91509150600061059a838389610937565b90506105bb8173ffffffffffffffffffffffffffffffffffffffff16610a5b565b6105d257600080600095509550955050505061092e565b60008173ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e0604051808303818680610615610b35565b15801561062a57600080610627610aca565b50505b505a610634610b81565b5050505050158015610653573d6000803e3d6000610650610aca565b50505b505050506040513d60e08110156106725760008061066f610aca565b50505b810190808051929190602001805192919060200180519291906020018051929190602001805192919060200180519291906020018051906020019092919050505050505050505073ffffffffffffffffffffffffffffffffffffffff1690508373ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16141561072f576060610726828261071e670de0b6b3a76400008361036b565b901c9061036b565b901c9650610760565b61075d816102f47f0de0b6b3a764000000000000000000000000000000000000000000000000000082610469565b96505b8973ffffffffffffffffffffffffffffffffffffffff166370a08231836040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260240160206040518083038186806107dc610b35565b1580156107f1576000806107ee610aca565b50505b505a6107fb610b81565b505050505015801561081a573d6000803e3d6000610817610aca565b50505b505050506040513d602081101561083957600080610836610aca565b50505b8101908080519850505073ffffffffffffffffffffffffffffffffffffffff8a1690506370a08231836040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260240160206040518083038186806108c1610b35565b1580156108d6576000806108d3610aca565b50505b505a6108e0610b81565b50505050501580156108ff573d6000803e3d60006108fc610aca565b50505b505050506040513d602081101561091e5760008061091b610aca565b50505b8101908080519750505050505050505b93509350939050565b6000731f98431c8ad98523631ae4a59f267346ea31f984848484604051602001808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018262ffffff1681526020019350505050604051602081830303815290604052805190602001207f0c231002d0970d2126e7e00ce88c3b0e5ec8e48dac71478d56245c34ea2f94476040517fff00000000000000000000000000000000000000000000000000000000000000602082015260609390931b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660218401526035830191909152605582015260750160405160208183030381529060405280519060200120949350505050565b60008082610a67610b35565b15159392505050565b63a8c4c5ec598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015610ac557600082820152602001610aae565b505050565b632a2a7adb598160e01b8152600481016020815285602082015260005b86811015610b02578086015182820160400152602001610ae7565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020610aae565b638540661f598160e01b8152610bb2565b80808311156103ea575090919050565b80808310156103ea575090919050565b836004820152846024820152606060448201528660648201526084810160005b88811015610bea578088015182820152602001610bd2565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af15059610c3f8d3d610ba2565b8c01610c4b8187610b92565b5b82811015610c605760008152602001610c4c565b50929c5050505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}