{
  "address": "0x0F85A912448279111694F4Ba4F85dC641c54b594",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISynthetixProxy",
          "name": "_proxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "dstToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "connector",
          "type": "address"
        }
      ],
      "name": "getRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxy",
      "outputs": [
        {
          "internalType": "contract ISynthetixProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xefb14955b775079734a53f11ae7d0948e74293a8c1d253b722cf6961f70f16fe",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0x0F85A912448279111694F4Ba4F85dC641c54b594",
    "transactionIndex": 0,
    "gasUsed": "2153473",
    "logsBloom": "0x
    "blockHash": "0xc0ca8661129a0467aaae91b77fb657ef61f58494a4ba670dff8c00ef84993373",
    "transactionHash": "0xefb14955b775079734a53f11ae7d0948e74293a8c1d253b722cf6961f70f16fe",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 677602,
        "transactionHash": "0xefb14955b775079734a53f11ae7d0948e74293a8c1d253b722cf6961f70f16fe",
        "address": "0x4200000000000000000000000000000000000006",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47",
          "0x0000000000000000000000004200000000000000000000000000000000000011"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000a9dfb38f46740",
        "logIndex": 0,
        "blockHash": "0xc0ca8661129a0467aaae91b77fb657ef61f58494a4ba670dff8c00ef84993373"
      }
    ],
    "blockNumber": 677602,
    "cumulativeGasUsed": "2153473",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1Cb059b7e74fD21665968C908806143E744D5F30"
  ],
  "solcInputHash": "68cc73e66051b371a3af7da5ff8c2b7d",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6-ci.2021.5.11+ovm+commit.3b061308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISynthetixProxy\",\"name\":\"_proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"contract ISynthetixProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/SynthetixOracle.sol\":\"SynthetixOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x36b5ca4eabe888b39b10973621ca0dcc9b1508f8d06db9ddf045d7aa7c867d4a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IOracle {\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external view returns (uint256 rate, uint256 weight);\\n}\\n\",\"keccak256\":\"0x108abc1d8fff266112dbbc6838ae1439af64aa4fd2a13aacb3e974f6b5690f15\",\"license\":\"MIT\"},\"contracts/interfaces/ISynthetixAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/iaddressresolver\\ninterface ISynthetixAddressResolver {\\n    function getSynth(bytes32 key) external view returns (address);\\n    function getAddress(bytes32 key) external view returns (address);\\n}\\n\",\"keccak256\":\"0x83054884fafd6b674e238510b2ee11a583574917ae184bb16a16ef7b4056e9cb\",\"license\":\"MIT\"},\"contracts/interfaces/ISynthetixExchangeRates.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface ISynthetixExchangeRates {\\n    function rateAndInvalid(bytes32 currencyKey) external view returns (uint256 rate, bool isInvalid);\\n}\\n\",\"keccak256\":\"0xc039eaff535e3e72d55910783892fb5bce27a81df1d23505c447f2bae183d88b\",\"license\":\"MIT\"},\"contracts/interfaces/ISynthetixProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface ISynthetixProxy {\\n    function target() external view returns (address);\\n}\\n\",\"keccak256\":\"0x9a1ff9a8568ce6bd8d1575a895794d74e20a1b2f20057edaf58a7a6d3f155f23\",\"license\":\"MIT\"},\"contracts/oracles/SynthetixOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../interfaces/ISynthetixExchangeRates.sol\\\";\\nimport \\\"../interfaces/ISynthetixProxy.sol\\\";\\nimport \\\"../interfaces/ISynthetixAddressResolver.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\n\\ncontract SynthetixOracle is IOracle {\\n    using SafeMath for uint256;\\n\\n    ISynthetixProxy public immutable proxy;\\n    IERC20 private constant _ETH = IERC20(0x0000000000000000000000000000000000000000);\\n    IERC20 private constant _NONE = IERC20(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n    uint256 private constant _RATE_TTL = 1 days;\\n    bytes32 private constant _EXCHANGE_RATES_KEY = 0x45786368616e6765526174657300000000000000000000000000000000000000;\\n    bytes32 private constant _SETH_KEY           = 0x50726f7879734554480000000000000000000000000000000000000000000000;\\n    bytes32 private constant _SNX_PROXY_KEY      = 0x50726f7879455243323000000000000000000000000000000000000000000000;\\n    bytes32 private constant _SUSD_PROXY_KEY     = 0x50726f7879455243323073555344000000000000000000000000000000000000;\\n    bytes32 private constant _PROXY_KEY          = 0x50726f7879000000000000000000000000000000000000000000000000000000;\\n    bytes private constant _SNX = \\\"SNX\\\";\\n    bytes private constant _SUSD = \\\"sUSD\\\";\\n\\n    constructor(ISynthetixProxy _proxy) {\\n        proxy = _proxy;\\n    }\\n\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external view override returns (uint256 rate, uint256 weight) {\\n        require(connector == _NONE, \\\"SO: connector should be None\\\");\\n        ISynthetixAddressResolver resolver = ISynthetixAddressResolver(proxy.target());\\n        ISynthetixExchangeRates exchangeRates = ISynthetixExchangeRates(resolver.getAddress(_EXCHANGE_RATES_KEY));\\n\\n        uint256 srcAnswer = srcToken != _ETH ? _getRate(address(srcToken), resolver, exchangeRates) : _getRate(resolver.getAddress(_SETH_KEY), resolver, exchangeRates);\\n        uint256 dstAnswer = dstToken != _ETH ? _getRate(address(dstToken), resolver, exchangeRates) : _getRate(resolver.getAddress(_SETH_KEY), resolver, exchangeRates);\\n        rate = srcAnswer.mul(1e18).div(dstAnswer);\\n        weight = 1e24;\\n    }\\n\\n    function _getRate(address token, ISynthetixAddressResolver resolver, ISynthetixExchangeRates exchangeRates) private view returns(uint256) {\\n        string memory symbol = ERC20(token).symbol();\\n\\n        bytes32 proxyKey;\\n        if (_memcmp(bytes(symbol), _SNX)) {\\n            proxyKey = _SNX_PROXY_KEY;\\n        } else if (_memcmp(bytes(symbol), _SUSD)) {\\n            proxyKey = _SUSD_PROXY_KEY;\\n        } else {\\n            assembly { // solhint-disable-line no-inline-assembly\\n                proxyKey := or(_PROXY_KEY, shr(40, mload(add(symbol, 32))))\\n            }\\n        }\\n        require(resolver.getAddress(proxyKey) == token, \\\"SO: unregistered token\\\");\\n\\n        bytes32 key;\\n        assembly { // solhint-disable-line no-inline-assembly\\n            key := mload(add(symbol, 32))\\n        }\\n\\n        (uint256 answer, bool isInvalid) = exchangeRates.rateAndInvalid(key);\\n        require(!isInvalid, \\\"SO: rate is invalid\\\");\\n\\n        return answer;\\n    }\\n\\n    function _memcmp(bytes memory a, bytes memory b) private pure returns(bool) {\\n        return (a.length == b.length) && (keccak256(a) == keccak256(b));\\n    }\\n}\\n\",\"keccak256\":\"0xf028c1cce1eebbfd5809138f0570581c620eb8ba726af233095bdabc58889ca4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040525a61000d61006c565b80156100215760008061001e6100c6565b50505b506040516110053803806110058339818101604052602081101561004d5760008061004a6100c6565b50505b81019080805160601b6001600160601b03191660805250610131915050565b63a8c4c5ec598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b60408110156100c1576000828201526020016100aa565b505050565b632a2a7adb598160e01b8152600481016020815285602082015260005b868110156100fe5780860151828201604001526020016100e3565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b60805160601c610eb26101536000398061017f52806105c35250610eb26000f3fe60806040525a61000d610c94565b80156100215760008061001e610cee565b50505b50600436106100475760003560e01c806314999e7914610055578063ec556889146100bb575b600080610052610cee565b50505b6100a36004803603606081101561007457600080610071610cee565b50505b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604090910135166100ec565b60405191825260208201526040908101905180910390f35b6100c36105c1565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff8381161461017b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f534f3a20636f6e6e6563746f722073686f756c64206265204e6f6e6500000000604482015260640160405180910390610178610cee565b50505b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d4b839926040518163ffffffff1660e01b815260040160206040518083038186806101de610d59565b1580156101f3576000806101f0610cee565b50505b505a6101fd610da5565b505050505015801561021c573d6000803e3d6000610219610cee565b50505b505050506040513d602081101561023b57600080610238610cee565b50505b8101908080519350600092505073ffffffffffffffffffffffffffffffffffffffff831690506321f8a7217f45786368616e67655261746573000000000000000000000000000000000000006040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b168152600481019190915260240160206040518083038186806102d1610d59565b1580156102e6576000806102e3610cee565b50505b505a6102f0610da5565b505050505015801561030f573d6000803e3d600061030c610cee565b50505b505050506040513d602081101561032e5760008061032b610cee565b50505b810190808051935060009250505073ffffffffffffffffffffffffffffffffffffffff88166104565761045173ffffffffffffffffffffffffffffffffffffffff84166321f8a7217f50726f78797345544800000000000000000000000000000000000000000000006040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b168152600481019190915260240160206040518083038186806103e1610d59565b1580156103f6576000806103f3610cee565b50505b505a610400610da5565b505050505015801561041f573d6000803e3d600061041c610cee565b50505b505050506040513d602081101561043e5760008061043b610cee565b50505b81019080805192508691508590506105e5565b610461565b6104618884846105e5565b9050600073ffffffffffffffffffffffffffffffffffffffff881661057f5761057a73ffffffffffffffffffffffffffffffffffffffff85166321f8a7217f50726f78797345544800000000000000000000000000000000000000000000006040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526004810191909152602401602060405180830381868061050a610d59565b15801561051f5760008061051c610cee565b50505b505a610529610da5565b5050505050158015610548573d6000803e3d6000610545610cee565b50505b505050506040513d602081101561056757600080610564610cee565b50505b81019080805192508791508690506105e5565b61058a565b61058a8885856105e5565b90506105a8816105a284670de0b6b3a7640000610b60565b90610be5565b9969d3c21bcecceda10000009950975050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000808473ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b81526004016000604051808303818680610629610d59565b15801561063e5760008061063b610cee565b50505b505a610648610da5565b5050505050158015610667573d6000803e3d6000610664610cee565b50505b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156106b7576000806106b4610cee565b50505b81019080805160405193929190846401000000008211156106e0576000806106dd610cee565b50505b9083019060208201858111156106fe576000806106fb610cee565b50505b82516401000000008111828201881017156107215760008061071e610cee565b50505b825250602001908051906020019080838360005b8381101561074d578082015183820152602001610735565b50505050905090810190601f16801561077a5780820380516001836020036101000a031916815260200191505b50604052505050905060006107c28260405160408082019052600381527f534e5800000000000000000000000000000000000000000000000000000000006020820152610c6e565b156107ee57507f50726f7879455243323000000000000000000000000000000000000000000000610884565b61082b8260405160408082019052600481527f73555344000000000000000000000000000000000000000000000000000000006020820152610c6e565b1561085757507f50726f7879455243323073555344000000000000000000000000000000000000610884565b602082015160281c7f50726f78790000000000000000000000000000000000000000000000000000001790505b8573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff166321f8a721836040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815260048101919091526024016020604051808303818680610902610d59565b15801561091757600080610914610cee565b50505b505a610921610da5565b5050505050158015610940573d6000803e3d600061093d610cee565b50505b505050506040513d602081101561095f5760008061095c610cee565b50505b81019080805173ffffffffffffffffffffffffffffffffffffffff169390931492506109f7915050576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f534f3a20756e7265676973746572656420746f6b656e000000000000000000006044820152606401604051809103906109f4610cee565b50505b6000602083015190506000808673ffffffffffffffffffffffffffffffffffffffff16630c71cd23846040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b168152600481019190915260240160408051808303818680610a69610d59565b158015610a7e57600080610a7b610cee565b50505b505a610a88610da5565b5050505050158015610aa7573d6000803e3d6000610aa4610cee565b50505b505050506040513d6040811015610ac657600080610ac3610cee565b50505b81019080805192919060200180519395509293505082159150610b549050576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f534f3a207261746520697320696e76616c696400000000000000000000000000604482015260640160405180910390610b51610cee565b50505b50979650505050505050565b600082610b6f57506000610bdf565b82820282848281610b7c57fe5b0414610bdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180610e916021913960400191505060405180910390610bd9610cee565b50505b90505b92915050565b6000808211610c5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015260640160405180910390610c5a610cee565b50505b818381610c6657fe5b049392505050565b600081518351148015610bdc575081805190602001208380519060200120149392505050565b63a8c4c5ec598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015610ce957600082820152602001610cd2565b505050565b632a2a7adb598160e01b8152600481016020815285602082015260005b86811015610d26578086015182820160400152602001610d0b565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020610cd2565b638540661f598160e01b8152610dd6565b8080831115610bdf575090919050565b8080831015610bdf575090919050565b836004820152846024820152606060448201528660648201526084810160005b88811015610e0e578088015182820152602001610df6565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af15059610e638d3d610dc6565b8c01610e6f8187610db6565b5b82811015610e845760008152602001610e70565b50929c5050505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
  "deployedBytecode": "0x60806040525a61000d610c94565b80156100215760008061001e610cee565b50505b50600436106100475760003560e01c806314999e7914610055578063ec556889146100bb575b600080610052610cee565b50505b6100a36004803603606081101561007457600080610071610cee565b50505b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604090910135166100ec565b60405191825260208201526040908101905180910390f35b6100c36105c1565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff8381161461017b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f534f3a20636f6e6e6563746f722073686f756c64206265204e6f6e6500000000604482015260640160405180910390610178610cee565b50505b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d4b839926040518163ffffffff1660e01b815260040160206040518083038186806101de610d59565b1580156101f3576000806101f0610cee565b50505b505a6101fd610da5565b505050505015801561021c573d6000803e3d6000610219610cee565b50505b505050506040513d602081101561023b57600080610238610cee565b50505b8101908080519350600092505073ffffffffffffffffffffffffffffffffffffffff831690506321f8a7217f45786368616e67655261746573000000000000000000000000000000000000006040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b168152600481019190915260240160206040518083038186806102d1610d59565b1580156102e6576000806102e3610cee565b50505b505a6102f0610da5565b505050505015801561030f573d6000803e3d600061030c610cee565b50505b505050506040513d602081101561032e5760008061032b610cee565b50505b810190808051935060009250505073ffffffffffffffffffffffffffffffffffffffff88166104565761045173ffffffffffffffffffffffffffffffffffffffff84166321f8a7217f50726f78797345544800000000000000000000000000000000000000000000006040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b168152600481019190915260240160206040518083038186806103e1610d59565b1580156103f6576000806103f3610cee565b50505b505a610400610da5565b505050505015801561041f573d6000803e3d600061041c610cee565b50505b505050506040513d602081101561043e5760008061043b610cee565b50505b81019080805192508691508590506105e5565b610461565b6104618884846105e5565b9050600073ffffffffffffffffffffffffffffffffffffffff881661057f5761057a73ffffffffffffffffffffffffffffffffffffffff85166321f8a7217f50726f78797345544800000000000000000000000000000000000000000000006040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526004810191909152602401602060405180830381868061050a610d59565b15801561051f5760008061051c610cee565b50505b505a610529610da5565b5050505050158015610548573d6000803e3d6000610545610cee565b50505b505050506040513d602081101561056757600080610564610cee565b50505b81019080805192508791508690506105e5565b61058a565b61058a8885856105e5565b90506105a8816105a284670de0b6b3a7640000610b60565b90610be5565b9969d3c21bcecceda10000009950975050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000808473ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b81526004016000604051808303818680610629610d59565b15801561063e5760008061063b610cee565b50505b505a610648610da5565b5050505050158015610667573d6000803e3d6000610664610cee565b50505b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156106b7576000806106b4610cee565b50505b81019080805160405193929190846401000000008211156106e0576000806106dd610cee565b50505b9083019060208201858111156106fe576000806106fb610cee565b50505b82516401000000008111828201881017156107215760008061071e610cee565b50505b825250602001908051906020019080838360005b8381101561074d578082015183820152602001610735565b50505050905090810190601f16801561077a5780820380516001836020036101000a031916815260200191505b50604052505050905060006107c28260405160408082019052600381527f534e5800000000000000000000000000000000000000000000000000000000006020820152610c6e565b156107ee57507f50726f7879455243323000000000000000000000000000000000000000000000610884565b61082b8260405160408082019052600481527f73555344000000000000000000000000000000000000000000000000000000006020820152610c6e565b1561085757507f50726f7879455243323073555344000000000000000000000000000000000000610884565b602082015160281c7f50726f78790000000000000000000000000000000000000000000000000000001790505b8573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff166321f8a721836040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815260048101919091526024016020604051808303818680610902610d59565b15801561091757600080610914610cee565b50505b505a610921610da5565b5050505050158015610940573d6000803e3d600061093d610cee565b50505b505050506040513d602081101561095f5760008061095c610cee565b50505b81019080805173ffffffffffffffffffffffffffffffffffffffff169390931492506109f7915050576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f534f3a20756e7265676973746572656420746f6b656e000000000000000000006044820152606401604051809103906109f4610cee565b50505b6000602083015190506000808673ffffffffffffffffffffffffffffffffffffffff16630c71cd23846040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b168152600481019190915260240160408051808303818680610a69610d59565b158015610a7e57600080610a7b610cee565b50505b505a610a88610da5565b5050505050158015610aa7573d6000803e3d6000610aa4610cee565b50505b505050506040513d6040811015610ac657600080610ac3610cee565b50505b81019080805192919060200180519395509293505082159150610b549050576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f534f3a207261746520697320696e76616c696400000000000000000000000000604482015260640160405180910390610b51610cee565b50505b50979650505050505050565b600082610b6f57506000610bdf565b82820282848281610b7c57fe5b0414610bdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180610e916021913960400191505060405180910390610bd9610cee565b50505b90505b92915050565b6000808211610c5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015260640160405180910390610c5a610cee565b50505b818381610c6657fe5b049392505050565b600081518351148015610bdc575081805190602001208380519060200120149392505050565b63a8c4c5ec598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015610ce957600082820152602001610cd2565b505050565b632a2a7adb598160e01b8152600481016020815285602082015260005b86811015610d26578086015182820160400152602001610d0b565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020610cd2565b638540661f598160e01b8152610dd6565b8080831115610bdf575090919050565b8080831015610bdf575090919050565b836004820152846024820152606060448201528660648201526084810160005b88811015610e0e578088015182820152602001610df6565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af15059610e638d3d610dc6565b8c01610e6f8187610db6565b5b82811015610e845760008152602001610e70565b50929c5050505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}