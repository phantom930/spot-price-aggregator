{
  "address": "0xf74d3A34655954F0264B068250009aEE1F06f101",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IKyberDmmFactory",
          "name": "_factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IKyberDmmFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "dstToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "connector",
          "type": "address"
        }
      ],
      "name": "getRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2bacec88059f0fb5fcde12964dbd3cc0070c7c379b250626e512dd1b7deaf627",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0xf74d3A34655954F0264B068250009aEE1F06f101",
    "transactionIndex": 256,
    "gasUsed": "652664",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x8a55bd34f4562ac1ae9d641208f7d999dba7711de91756e6c7c72229f7a90efc",
    "transactionHash": "0x2bacec88059f0fb5fcde12964dbd3cc0070c7c379b250626e512dd1b7deaf627",
    "logs": [],
    "blockNumber": 13415479,
    "cumulativeGasUsed": "16324505",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x833e4083b7ae46cea85695c4f7ed25cdad8886de"
  ],
  "solcInputHash": "09f16e030c268822005d0b018d30cb17",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IKyberDmmFactory\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IKyberDmmFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/KyberDmmOracle.sol\":\"KyberDmmOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/interfaces/IKyberDmmFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IKyberDmmFactory {\\n    function getPools(IERC20 token0, IERC20 token1) external view returns (address[] memory _tokenPools);\\n}\\n\",\"keccak256\":\"0x6392d7323b190ee446c254aa045b395abf6c6b7925da5e01cb4e8fa440665a11\",\"license\":\"MIT\"},\"contracts/interfaces/IKyberDmmPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\npragma abicoder v1;\\n\\n\\ninterface IKyberDmmPool {\\n    function getTradeInfo() external view returns (uint112 reserve0, uint112 reserve1, uint112 _vReserve0, uint112 _vReserve1, uint256 feeInPrecision);\\n}\\n\",\"keccak256\":\"0xbaf8aa9f387f2e15c443546d2f984fc7f6174151733208bbb50bfe774022ba65\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IOracle {\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external view returns (uint256 rate, uint256 weight);\\n}\\n\",\"keccak256\":\"0x269f175afcf7d50c48b479dca8a8b5cfe85740c116f2d2282ab7cfcf5da932a4\",\"license\":\"MIT\"},\"contracts/libraries/Sqrt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\npragma abicoder v1;\\n\\n\\nlibrary Sqrt {\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        unchecked {\\n            if (y > 3) {\\n                z = y;\\n                uint x = y / 2 + 1;\\n                while (x < z) {\\n                    z = x;\\n                    x = (y / x + x) / 2;\\n                }\\n            } else if (y != 0) {\\n                z = 1;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd1be563eb14caa94cf16ca08eea496265507e0d071ad64c29eb6758bb1e0a07b\",\"license\":\"MIT\"},\"contracts/oracles/KyberDmmOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../interfaces/IKyberDmmFactory.sol\\\";\\nimport \\\"../interfaces/IKyberDmmPool.sol\\\";\\nimport \\\"../libraries/Sqrt.sol\\\";\\n\\n\\ncontract KyberDmmOracle is IOracle {\\n    using SafeMath for uint256;\\n    using Sqrt for uint256;\\n\\n    IKyberDmmFactory public immutable factory;\\n\\n    constructor(IKyberDmmFactory _factory) {\\n        factory = _factory;\\n    }\\n\\n    IERC20 private constant _NONE = IERC20(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external override view returns (uint256 rate, uint256 weight) {\\n        unchecked {\\n            if (connector == _NONE) {\\n                address[] memory pools = factory.getPools(srcToken, dstToken);\\n\\n                require(pools.length > 0, \\\"KO: no pools\\\");\\n\\n                for (uint256 i = 0; i < pools.length; i++) {\\n                    (uint256 b0, uint256 b1) = _getBalances(srcToken, dstToken, pools[i]);\\n\\n                    uint256 w = b0.mul(b1);\\n                    rate = rate.add(b1.mul(1e18).div(b0).mul(w));\\n                    weight = weight.add(w);\\n                }\\n            } else {\\n                address[] memory pools0 = factory.getPools(srcToken, connector);\\n                address[] memory pools1 = factory.getPools(connector, dstToken);\\n\\n                require(pools0.length > 0 && pools1.length > 0, \\\"KO: no pools with connector\\\");\\n\\n                for (uint256 i = 0; i < pools0.length; i++) {\\n                    for (uint256 j = 0; j < pools1.length; j++) {\\n                        (uint256 b0, uint256 bc0) = _getBalances(srcToken, connector, pools0[i]);\\n                        (uint256 bc1, uint256 b1) = _getBalances(connector, dstToken, pools1[j]);\\n\\n                        if (bc0 > bc1) {\\n                            b0 = b0.mul(bc1).div(bc0);\\n                        } else {\\n                            b1 = b1.mul(bc0).div(bc1);\\n                        }\\n\\n                        uint256 w = b0.mul(b1);\\n                        rate = rate.add(b1.mul(1e18).div(b0).mul(w));\\n                        weight = weight.add(w);\\n                    }\\n                }\\n            }\\n        }\\n\\n        if (weight > 0) {\\n            rate = rate / weight;\\n            weight = weight.sqrt();\\n        }\\n    }\\n\\n    function _getBalances(IERC20 srcToken, IERC20 dstToken, address pool) private view returns (uint256 srcBalance, uint256 dstBalance) {\\n        (, , srcBalance, dstBalance,) = IKyberDmmPool(pool).getTradeInfo();\\n        if (srcToken > dstToken) {\\n            (srcBalance, dstBalance) = (dstBalance, srcBalance);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1a1f92edf8a257f1a3bed40bdb83525c25f153824970162828bccd6f4182e4f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610b53380380610b538339818101604052602081101561003357600080fd5b50516001600160a01b0316608052608051610ae361007060003960008181609e0152818161010e015281816103a801526105380152610ae36000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806314999e791461003b578063c45a015514610099575b600080fd5b6100806004803603606081101561005157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604090910135166100e9565b6040805192835260208301919091528051918290030190f35b6100c07f000000000000000000000000000000000000000000000000000000000000000081565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60008073ffffffffffffffffffffffffffffffffffffffff83811614156103a45760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635b1dc86f87876040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b1580156101b157600080fd5b505afa1580156101c5573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561020c57600080fd5b810190808051604051939291908464010000000082111561022c57600080fd5b90830190602082018581111561024157600080fd5b825186602082028301116401000000008211171561025e57600080fd5b82525081516020918201928201910280838360005b8381101561028b578181015183820152602001610273565b505050509050016040525050509050600081511161030a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4b4f3a206e6f20706f6f6c730000000000000000000000000000000000000000604482015290519081900360640190fd5b60005b815181101561039d5760008061033d898986868151811061033057610330610990565b6020026020010151610847565b9092509050600061034e8383610907565b9050610380610379826103738661036d87670de0b6b3a7640000610907565b9061091a565b90610907565b8890610926565b965061038c8682610926565b9550506001909201915061030d9050565b5050610821565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635b1dc86f87866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15801561044b57600080fd5b505afa15801561045f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156104a657600080fd5b81019080805160405193929190846401000000008211156104c657600080fd5b9083019060208201858111156104db57600080fd5b82518660208202830111640100000000821117156104f857600080fd5b82525081516020918201928201910280838360005b8381101561052557818101518382015260200161050d565b50505050905001604052505050905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635b1dc86f86886040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b1580156105db57600080fd5b505afa1580156105ef573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561063657600080fd5b810190808051604051939291908464010000000082111561065657600080fd5b90830190602082018581111561066b57600080fd5b825186602082028301116401000000008211171561068857600080fd5b82525081516020918201928201910280838360005b838110156106b557818101518382015260200161069d565b505050509050016040525050509050600082511180156106d6575060008151115b61074157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4b4f3a206e6f20706f6f6c73207769746820636f6e6e6563746f720000000000604482015290519081900360640190fd5b60005b825181101561081d5760005b8251811015610814576000806107738b8a88878151811061033057610330610990565b915091506000806107918b8d89888151811061033057610330610990565b91509150818311156107b2576107ab8361036d8685610907565b93506107c3565b6107c08261036d8386610907565b90505b60006107cf8583610907565b90506107f56107ee826103738861036d87670de0b6b3a7640000610907565b8c90610926565b9a506108018a82610926565b9950506001909401935061075092505050565b50600101610744565b5050505b801561083f576108318183610a1d565b915061083c81610932565b90505b935093915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663d66940276040518163ffffffff1660e01b815260040160a06040518083038186803b15801561089057600080fd5b505afa1580156108a4573d6000803e3d6000fd5b505050506040513d60a08110156108ba57600080fd5b5060408101516060909101516dffffffffffffffffffffffffffff918216935016905073ffffffffffffffffffffffffffffffffffffffff808516908616111561083f5790935093915050565b60006109138284610a58565b9392505050565b60006109138284610a1d565b60006109138284610a95565b60006003821115610981575080600160028204015b8181101561097b57809150600281828581610964576109646109bf565b040181610973576109736109bf565b049050610947565b50919050565b811561098b575060015b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082610a53577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a9057610a906109ee565b500290565b60008219821115610aa857610aa86109ee565b50019056fea2646970667358221220494e007dcd8e67a5262a18883fa6013de2b9d8cf3c8843eb69021f18bc22aebc64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806314999e791461003b578063c45a015514610099575b600080fd5b6100806004803603606081101561005157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604090910135166100e9565b6040805192835260208301919091528051918290030190f35b6100c07f000000000000000000000000000000000000000000000000000000000000000081565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60008073ffffffffffffffffffffffffffffffffffffffff83811614156103a45760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635b1dc86f87876040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b1580156101b157600080fd5b505afa1580156101c5573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561020c57600080fd5b810190808051604051939291908464010000000082111561022c57600080fd5b90830190602082018581111561024157600080fd5b825186602082028301116401000000008211171561025e57600080fd5b82525081516020918201928201910280838360005b8381101561028b578181015183820152602001610273565b505050509050016040525050509050600081511161030a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4b4f3a206e6f20706f6f6c730000000000000000000000000000000000000000604482015290519081900360640190fd5b60005b815181101561039d5760008061033d898986868151811061033057610330610990565b6020026020010151610847565b9092509050600061034e8383610907565b9050610380610379826103738661036d87670de0b6b3a7640000610907565b9061091a565b90610907565b8890610926565b965061038c8682610926565b9550506001909201915061030d9050565b5050610821565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635b1dc86f87866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b15801561044b57600080fd5b505afa15801561045f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156104a657600080fd5b81019080805160405193929190846401000000008211156104c657600080fd5b9083019060208201858111156104db57600080fd5b82518660208202830111640100000000821117156104f857600080fd5b82525081516020918201928201910280838360005b8381101561052557818101518382015260200161050d565b50505050905001604052505050905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635b1dc86f86886040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060006040518083038186803b1580156105db57600080fd5b505afa1580156105ef573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561063657600080fd5b810190808051604051939291908464010000000082111561065657600080fd5b90830190602082018581111561066b57600080fd5b825186602082028301116401000000008211171561068857600080fd5b82525081516020918201928201910280838360005b838110156106b557818101518382015260200161069d565b505050509050016040525050509050600082511180156106d6575060008151115b61074157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4b4f3a206e6f20706f6f6c73207769746820636f6e6e6563746f720000000000604482015290519081900360640190fd5b60005b825181101561081d5760005b8251811015610814576000806107738b8a88878151811061033057610330610990565b915091506000806107918b8d89888151811061033057610330610990565b91509150818311156107b2576107ab8361036d8685610907565b93506107c3565b6107c08261036d8386610907565b90505b60006107cf8583610907565b90506107f56107ee826103738861036d87670de0b6b3a7640000610907565b8c90610926565b9a506108018a82610926565b9950506001909401935061075092505050565b50600101610744565b5050505b801561083f576108318183610a1d565b915061083c81610932565b90505b935093915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663d66940276040518163ffffffff1660e01b815260040160a06040518083038186803b15801561089057600080fd5b505afa1580156108a4573d6000803e3d6000fd5b505050506040513d60a08110156108ba57600080fd5b5060408101516060909101516dffffffffffffffffffffffffffff918216935016905073ffffffffffffffffffffffffffffffffffffffff808516908616111561083f5790935093915050565b60006109138284610a58565b9392505050565b60006109138284610a1d565b60006109138284610a95565b60006003821115610981575080600160028204015b8181101561097b57809150600281828581610964576109646109bf565b040181610973576109736109bf565b049050610947565b50919050565b811561098b575060015b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082610a53577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a9057610a906109ee565b500290565b60008219821115610aa857610aa86109ee565b50019056fea2646970667358221220494e007dcd8e67a5262a18883fa6013de2b9d8cf3c8843eb69021f18bc22aebc64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}