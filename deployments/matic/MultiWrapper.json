{
  "address": "0x54431918cEC22932fCF97E54769F4E00f646690F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IWrapper[]",
          "name": "existingWrappers",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IWrapper",
          "name": "connector",
          "type": "address"
        }
      ],
      "name": "WrapperAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IWrapper",
          "name": "connector",
          "type": "address"
        }
      ],
      "name": "WrapperRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IWrapper",
          "name": "wrapper",
          "type": "address"
        }
      ],
      "name": "addWrapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getWrappedTokens",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "wrappedTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "rates",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IWrapper",
          "name": "wrapper",
          "type": "address"
        }
      ],
      "name": "removeWrapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappers",
      "outputs": [
        {
          "internalType": "contract IWrapper[]",
          "name": "allWrappers",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcbf3719a93a0f53bf805e9016794b53ae2f3ac1b8f4f8ffe88be5b38acd773dd",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0x54431918cEC22932fCF97E54769F4E00f646690F",
    "transactionIndex": 23,
    "gasUsed": "1071303",
    "logsBloom": "0x
    "blockHash": "0x41ba5f4d56776791f7862f6ad9be04682a2380eded0551ef21de8f58d9920eeb",
    "transactionHash": "0xcbf3719a93a0f53bf805e9016794b53ae2f3ac1b8f4f8ffe88be5b38acd773dd",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 14095516,
        "transactionHash": "0xcbf3719a93a0f53bf805e9016794b53ae2f3ac1b8f4f8ffe88be5b38acd773dd",
        "address": "0x54431918cEC22932fCF97E54769F4E00f646690F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47"
        ],
        "data": "0x",
        "logIndex": 80,
        "blockHash": "0x41ba5f4d56776791f7862f6ad9be04682a2380eded0551ef21de8f58d9920eeb"
      },
      {
        "transactionIndex": 23,
        "blockNumber": 14095516,
        "transactionHash": "0xcbf3719a93a0f53bf805e9016794b53ae2f3ac1b8f4f8ffe88be5b38acd773dd",
        "address": "0x54431918cEC22932fCF97E54769F4E00f646690F",
        "topics": [
          "0x9471982c02bc8a0888c85288dcf07501f924fd3b336a516ff0747d9d28b516fd"
        ],
        "data": "0x000000000000000000000000a0446d8804611944f1b527ecd37d7dcbe442caba",
        "logIndex": 81,
        "blockHash": "0x41ba5f4d56776791f7862f6ad9be04682a2380eded0551ef21de8f58d9920eeb"
      },
      {
        "transactionIndex": 23,
        "blockNumber": 14095516,
        "transactionHash": "0xcbf3719a93a0f53bf805e9016794b53ae2f3ac1b8f4f8ffe88be5b38acd773dd",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000003ce582ac306000000000000000000000000000000000000000000000000000011aabb4b1ed8000000000000000000000000000000000000000000000000a3e07d8435241400b3000000000000000000000000000000000000000000000000000ddc63205bd2000000000000000000000000000000000000000000000000a3e081528d4ed706b3",
        "logIndex": 82,
        "blockHash": "0x41ba5f4d56776791f7862f6ad9be04682a2380eded0551ef21de8f58d9920eeb"
      }
    ],
    "blockNumber": 14095516,
    "cumulativeGasUsed": "4141318",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0xA0446D8804611944F1B527eCD37d7dcbE442caba"
    ]
  ],
  "solcInputHash": "23e7e3de8927cda560d4a77f96982605",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWrapper[]\",\"name\":\"existingWrappers\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IWrapper\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"WrapperAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IWrapper\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"WrapperRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IWrapper\",\"name\":\"wrapper\",\"type\":\"address\"}],\"name\":\"addWrapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getWrappedTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"wrappedTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rates\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWrapper\",\"name\":\"wrapper\",\"type\":\"address\"}],\"name\":\"removeWrapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappers\",\"outputs\":[{\"internalType\":\"contract IWrapper[]\",\"name\":\"allWrappers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MultiWrapper.sol\":\"MultiWrapper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x549c5343ad9f7e3f38aa4c4761854403502574bbc15b822db2ce892ff9b79da7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x9a2c1eebb65250f0e11882237038600f22a62376f0547db4acc0dfe0a3d8d34f\",\"license\":\"MIT\"},\"contracts/MultiWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/IWrapper.sol\\\";\\n\\n\\ncontract MultiWrapper is Ownable {\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    event WrapperAdded(IWrapper connector);\\n    event WrapperRemoved(IWrapper connector);\\n\\n    EnumerableSet.AddressSet private _wrappers;\\n\\n    constructor(IWrapper[] memory existingWrappers) {\\n        for (uint256 i = 0; i < existingWrappers.length; i++) {\\n            require(_wrappers.add(address(existingWrappers[i])), \\\"Wrapper already added\\\");\\n            emit WrapperAdded(existingWrappers[i]);\\n        }\\n    }\\n\\n    function wrappers() external view returns (IWrapper[] memory allWrappers) {\\n        allWrappers = new IWrapper[](_wrappers.length());\\n        for (uint256 i = 0; i < allWrappers.length; i++) {\\n            allWrappers[i] = IWrapper(uint256(_wrappers._inner._values[i]));\\n        }\\n    }\\n\\n    function addWrapper(IWrapper wrapper) external onlyOwner {\\n        require(_wrappers.add(address(wrapper)), \\\"Wrapper already added\\\");\\n        emit WrapperAdded(wrapper);\\n    }\\n\\n    function removeWrapper(IWrapper wrapper) external onlyOwner {\\n        require(_wrappers.remove(address(wrapper)), \\\"Unknown wrapper\\\");\\n        emit WrapperRemoved(wrapper);\\n    }\\n\\n    function getWrappedTokens(IERC20 token) external view returns (IERC20[] memory wrappedTokens, uint256[] memory rates) {\\n        IERC20[] memory memWrappedTokens = new IERC20[](20);\\n        uint256[] memory memRates = new uint256[](20);\\n        uint256 len = 0;\\n        for (uint256 i = 0; i < _wrappers._inner._values.length; i++) {\\n            try IWrapper(uint256(_wrappers._inner._values[i])).wrap(token) returns (IERC20 wrappedToken, uint256 rate) {\\n                memWrappedTokens[len] = wrappedToken;\\n                memRates[len] = rate;\\n                len += 1;\\n                for (uint256 j = 0; j < _wrappers._inner._values.length; j++) {\\n                    if (i != j) {\\n                        try IWrapper(uint256(_wrappers._inner._values[j])).wrap(wrappedToken) returns (IERC20 wrappedToken2, uint256 rate2) {\\n                            bool used = false;\\n                            for (uint256 k = 0; k < len; k++) {\\n                                if (wrappedToken2 == memWrappedTokens[k]) {\\n                                    used = true;\\n                                    break;\\n                                }\\n                            }\\n                            if (!used) {\\n                                memWrappedTokens[len] = wrappedToken2;\\n                                memRates[len] = rate.mul(rate2).div(1e18);\\n                                len += 1;\\n                            }\\n                        } catch { continue; }\\n                    }\\n                }\\n            } catch { continue; }\\n        }\\n        wrappedTokens = new IERC20[](len + 1);\\n        rates = new uint256[](len + 1);\\n        for (uint256 i = 0; i < len; i++) {\\n            wrappedTokens[i] = memWrappedTokens[i];\\n            rates[i] = memRates[i];\\n        }\\n        wrappedTokens[len] = token;\\n        rates[len] = 1e18;\\n    }\\n}\\n\",\"keccak256\":\"0xa1ca090fd1aae6d9089b36e8e470070a3a5849f8e628af8209ccfb87d94ca777\",\"license\":\"MIT\"},\"contracts/interfaces/IWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IWrapper {\\n    function wrap(IERC20 token) external view returns (IERC20 wrappedToken, uint256 rate);\\n}\\n\",\"keccak256\":\"0x91c31c0d6a88c3d9316c86a5d675a4627a5a1bdd039c74550554516ea09909de\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200136a3803806200136a833981810160405260208110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82518660208202830111640100000000821117156200008c57600080fd5b82525081516020918201928201910280838360005b83811015620000bb578181015183820152602001620000a1565b505050509050016040525050506000620000da6200021760201b60201c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060005b81518110156200020f57620001608282815181106200014257fe5b602002602001015160016200021b60201b62000da11790919060201c565b620001b2576040805162461bcd60e51b815260206004820152601560248201527f5772617070657220616c72656164792061646465640000000000000000000000604482015290519081900360640190fd5b7f9471982c02bc8a0888c85288dcf07501f924fd3b336a516ff0747d9d28b516fd828281518110620001e057fe5b602002602001015160405180826001600160a01b0316815260200191505060405180910390a160010162000127565b5050620002a2565b3390565b600062000232836001600160a01b0384166200023b565b90505b92915050565b60006200024983836200028a565b620002815750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000235565b50600062000235565b60009081526001919091016020526040902054151590565b6110b880620002b26000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063cb991d941161005b578063cb991d94146100f0578063e914d494146101bc578063f2fde38b146101ef578063f56d770a146102225761007d565b806326b09c2914610082578063715018a6146100b75780638da5cb5b146100bf575b600080fd5b6100b56004803603602081101561009857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661027a565b005b6100b56103e4565b6100c76104fb565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101236004803603602081101561010657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610517565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561016757818101518382015260200161014f565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156101a657818101518382015260200161018e565b5050505090500194505050505060405180910390f35b6100b5600480360360208110156101d257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166109e2565b6100b56004803603602081101561020557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610b4c565b61022a610ced565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561026657818101518382015260200161024e565b505050509050019250505060405180910390f35b610282610dcc565b73ffffffffffffffffffffffffffffffffffffffff166102a06104fb565b73ffffffffffffffffffffffffffffffffffffffff161461032257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61032d600182610da1565b61039857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f5772617070657220616c72656164792061646465640000000000000000000000604482015290519081900360640190fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8316815290517f9471982c02bc8a0888c85288dcf07501f924fd3b336a516ff0747d9d28b516fd9181900360200190a150565b6103ec610dcc565b73ffffffffffffffffffffffffffffffffffffffff1661040a6104fb565b73ffffffffffffffffffffffffffffffffffffffff161461048c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b6040805160148082526102a082019092526060918291600091602082016102808036833750506040805160148082526102a08201909252929350600092915060208201610280803683370190505090506000805b60015481101561084a57600180548290811061058357fe5b906000526020600020015460001c73ffffffffffffffffffffffffffffffffffffffff1663023276f0886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050604080518083038186803b1580156105f657600080fd5b505afa92505050801561062257506040513d604081101561061657600080fd5b50805160209091015160015b61062b57610842565b8186858151811061063857fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508085858151811061067f57fe5b60200260200101818152505060018401935060005b60015481101561083e578084146108365760018054829081106106b357fe5b906000526020600020015460001c73ffffffffffffffffffffffffffffffffffffffff1663023276f0846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050604080518083038186803b15801561072657600080fd5b505afa92505050801561075257506040513d604081101561074657600080fd5b50805160209091015160015b61075b57610836565b6000805b888110156107bf578a818151811061077357fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156107b757600191506107bf565b60010161075f565b508061083257828a89815181106107d257fe5b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152610813670de0b6b3a764000061080d8785610dd0565b90610e43565b89898151811061081f57fe5b6020026020010181815250506001880197505b5050505b600101610694565b5050505b60010161056b565b508060010167ffffffffffffffff8111801561086557600080fd5b5060405190808252806020026020018201604052801561088f578160200160208202803683370190505b5094508060010167ffffffffffffffff811180156108ac57600080fd5b506040519080825280602002602001820160405280156108d6578160200160208202803683370190505b50935060005b81811015610971578381815181106108f057fe5b602002602001015186828151811061090457fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082818151811061094a57fe5b602002602001015185828151811061095e57fe5b60209081029190910101526001016108dc565b508585828151811061097f57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050670de0b6b3a76400008482815181106109ce57fe5b602002602001018181525050505050915091565b6109ea610dcc565b73ffffffffffffffffffffffffffffffffffffffff16610a086104fb565b73ffffffffffffffffffffffffffffffffffffffff1614610a8a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b610a95600182610ec4565b610b0057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f556e6b6e6f776e20777261707065720000000000000000000000000000000000604482015290519081900360640190fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8316815290517f6728138e7d63827e0674bb75cd86127580945caff9813b228967dadf0e5cb5749181900360200190a150565b610b54610dcc565b73ffffffffffffffffffffffffffffffffffffffff16610b726104fb565b73ffffffffffffffffffffffffffffffffffffffff1614610bf457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116610c60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061103c6026913960400191505060405180910390fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6060610cf96001610ee6565b67ffffffffffffffff81118015610d0f57600080fd5b50604051908082528060200260200182016040528015610d39578160200160208202803683370190505b50905060005b8151811015610d9d576001805482908110610d5657fe5b906000526020600020015460001c828281518110610d7057fe5b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101610d3f565b5090565b6000610dc38373ffffffffffffffffffffffffffffffffffffffff8416610ef1565b90505b92915050565b3390565b600082610ddf57506000610dc6565b82820282848281610dec57fe5b0414610dc3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806110626021913960400191505060405180910390fd5b6000808211610eb357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610ebc57fe5b049392505050565b6000610dc38373ffffffffffffffffffffffffffffffffffffffff8416610f3b565b6000610dc68261101f565b6000610efd8383611023565b610f3357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610dc6565b506000610dc6565b600081815260018301602052604081205480156110155783547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8083019190810190600090879083908110610f8c57fe5b9060005260206000200154905080876000018481548110610fa957fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080610fd957fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610dc6565b6000915050610dc6565b5490565b6000908152600191909101602052604090205415159056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212207eedf2577b25bc2e6cd0b68a65378de4f7699bc9b544bf107d2f8f643dc5043264736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063cb991d941161005b578063cb991d94146100f0578063e914d494146101bc578063f2fde38b146101ef578063f56d770a146102225761007d565b806326b09c2914610082578063715018a6146100b75780638da5cb5b146100bf575b600080fd5b6100b56004803603602081101561009857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661027a565b005b6100b56103e4565b6100c76104fb565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101236004803603602081101561010657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610517565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561016757818101518382015260200161014f565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156101a657818101518382015260200161018e565b5050505090500194505050505060405180910390f35b6100b5600480360360208110156101d257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166109e2565b6100b56004803603602081101561020557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610b4c565b61022a610ced565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561026657818101518382015260200161024e565b505050509050019250505060405180910390f35b610282610dcc565b73ffffffffffffffffffffffffffffffffffffffff166102a06104fb565b73ffffffffffffffffffffffffffffffffffffffff161461032257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61032d600182610da1565b61039857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f5772617070657220616c72656164792061646465640000000000000000000000604482015290519081900360640190fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8316815290517f9471982c02bc8a0888c85288dcf07501f924fd3b336a516ff0747d9d28b516fd9181900360200190a150565b6103ec610dcc565b73ffffffffffffffffffffffffffffffffffffffff1661040a6104fb565b73ffffffffffffffffffffffffffffffffffffffff161461048c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b6040805160148082526102a082019092526060918291600091602082016102808036833750506040805160148082526102a08201909252929350600092915060208201610280803683370190505090506000805b60015481101561084a57600180548290811061058357fe5b906000526020600020015460001c73ffffffffffffffffffffffffffffffffffffffff1663023276f0886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050604080518083038186803b1580156105f657600080fd5b505afa92505050801561062257506040513d604081101561061657600080fd5b50805160209091015160015b61062b57610842565b8186858151811061063857fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508085858151811061067f57fe5b60200260200101818152505060018401935060005b60015481101561083e578084146108365760018054829081106106b357fe5b906000526020600020015460001c73ffffffffffffffffffffffffffffffffffffffff1663023276f0846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050604080518083038186803b15801561072657600080fd5b505afa92505050801561075257506040513d604081101561074657600080fd5b50805160209091015160015b61075b57610836565b6000805b888110156107bf578a818151811061077357fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156107b757600191506107bf565b60010161075f565b508061083257828a89815181106107d257fe5b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152610813670de0b6b3a764000061080d8785610dd0565b90610e43565b89898151811061081f57fe5b6020026020010181815250506001880197505b5050505b600101610694565b5050505b60010161056b565b508060010167ffffffffffffffff8111801561086557600080fd5b5060405190808252806020026020018201604052801561088f578160200160208202803683370190505b5094508060010167ffffffffffffffff811180156108ac57600080fd5b506040519080825280602002602001820160405280156108d6578160200160208202803683370190505b50935060005b81811015610971578381815181106108f057fe5b602002602001015186828151811061090457fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082818151811061094a57fe5b602002602001015185828151811061095e57fe5b60209081029190910101526001016108dc565b508585828151811061097f57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050670de0b6b3a76400008482815181106109ce57fe5b602002602001018181525050505050915091565b6109ea610dcc565b73ffffffffffffffffffffffffffffffffffffffff16610a086104fb565b73ffffffffffffffffffffffffffffffffffffffff1614610a8a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b610a95600182610ec4565b610b0057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f556e6b6e6f776e20777261707065720000000000000000000000000000000000604482015290519081900360640190fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8316815290517f6728138e7d63827e0674bb75cd86127580945caff9813b228967dadf0e5cb5749181900360200190a150565b610b54610dcc565b73ffffffffffffffffffffffffffffffffffffffff16610b726104fb565b73ffffffffffffffffffffffffffffffffffffffff1614610bf457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116610c60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061103c6026913960400191505060405180910390fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6060610cf96001610ee6565b67ffffffffffffffff81118015610d0f57600080fd5b50604051908082528060200260200182016040528015610d39578160200160208202803683370190505b50905060005b8151811015610d9d576001805482908110610d5657fe5b906000526020600020015460001c828281518110610d7057fe5b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101610d3f565b5090565b6000610dc38373ffffffffffffffffffffffffffffffffffffffff8416610ef1565b90505b92915050565b3390565b600082610ddf57506000610dc6565b82820282848281610dec57fe5b0414610dc3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806110626021913960400191505060405180910390fd5b6000808211610eb357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610ebc57fe5b049392505050565b6000610dc38373ffffffffffffffffffffffffffffffffffffffff8416610f3b565b6000610dc68261101f565b6000610efd8383611023565b610f3357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610dc6565b506000610dc6565b600081815260018301602052604081205480156110155783547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8083019190810190600090879083908110610f8c57fe5b9060005260206000200154905080876000018481548110610fa957fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080610fd957fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610dc6565b6000915050610dc6565b5490565b6000908152600191909101602052604090205415159056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212207eedf2577b25bc2e6cd0b68a65378de4f7699bc9b544bf107d2f8f643dc5043264736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/MultiWrapper.sol:MultiWrapper",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1081,
        "contract": "contracts/MultiWrapper.sol:MultiWrapper",
        "label": "_wrappers",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressSet)841_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)841_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 840,
            "contract": "contracts/MultiWrapper.sol:MultiWrapper",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)576_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)576_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 571,
            "contract": "contracts/MultiWrapper.sol:MultiWrapper",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 575,
            "contract": "contracts/MultiWrapper.sol:MultiWrapper",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}