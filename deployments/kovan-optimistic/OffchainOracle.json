{
  "address": "0xfcA5cc20A00D8acf04D0C1793C94D01D3ab07D48",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract MultiWrapper",
          "name": "_multiWrapper",
          "type": "address"
        },
        {
          "internalType": "contract IOracle[]",
          "name": "existingOracles",
          "type": "address[]"
        },
        {
          "internalType": "enum OffchainOracle.OracleType[]",
          "name": "oracleTypes",
          "type": "uint8[]"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "existingConnectors",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20",
          "name": "wBase",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "connector",
          "type": "address"
        }
      ],
      "name": "ConnectorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "connector",
          "type": "address"
        }
      ],
      "name": "ConnectorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract MultiWrapper",
          "name": "multiWrapper",
          "type": "address"
        }
      ],
      "name": "MultiWrapperUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IOracle",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum OffchainOracle.OracleType",
          "name": "oracleType",
          "type": "uint8"
        }
      ],
      "name": "OracleAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IOracle",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum OffchainOracle.OracleType",
          "name": "oracleType",
          "type": "uint8"
        }
      ],
      "name": "OracleRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "connector",
          "type": "address"
        }
      ],
      "name": "addConnector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOracle",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "enum OffchainOracle.OracleType",
          "name": "oracleKind",
          "type": "uint8"
        }
      ],
      "name": "addOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "connectors",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "allConnectors",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "dstToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "useWrappers",
          "type": "bool"
        }
      ],
      "name": "getRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "weightedRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "useSrcWrappers",
          "type": "bool"
        }
      ],
      "name": "getRateToEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "weightedRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multiWrapper",
      "outputs": [
        {
          "internalType": "contract MultiWrapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracles",
      "outputs": [
        {
          "internalType": "contract IOracle[]",
          "name": "allOracles",
          "type": "address[]"
        },
        {
          "internalType": "enum OffchainOracle.OracleType[]",
          "name": "oracleTypes",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "connector",
          "type": "address"
        }
      ],
      "name": "removeConnector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOracle",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "enum OffchainOracle.OracleType",
          "name": "oracleKind",
          "type": "uint8"
        }
      ],
      "name": "removeOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract MultiWrapper",
          "name": "_multiWrapper",
          "type": "address"
        }
      ],
      "name": "setMultiWrapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3285ca114d300306af8a022ad2a2682e0c4b1aad8c55da8f1e17975e712a820f",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0xfcA5cc20A00D8acf04D0C1793C94D01D3ab07D48",
    "transactionIndex": 0,
    "gasUsed": "5207680",
    "logsBloom": "0x
    "blockHash": "0x9cbcc03876e42adac75808488f1f174f74e4679260cc71845fcf4ccbdb2c7db0",
    "transactionHash": "0x3285ca114d300306af8a022ad2a2682e0c4b1aad8c55da8f1e17975e712a820f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 978658,
        "transactionHash": "0x3285ca114d300306af8a022ad2a2682e0c4b1aad8c55da8f1e17975e712a820f",
        "address": "0x4200000000000000000000000000000000000006",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47",
          "0x0000000000000000000000004200000000000000000000000000000000000011"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000006ca2faa051f40",
        "logIndex": 0,
        "blockHash": "0x9cbcc03876e42adac75808488f1f174f74e4679260cc71845fcf4ccbdb2c7db0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 978658,
        "transactionHash": "0x3285ca114d300306af8a022ad2a2682e0c4b1aad8c55da8f1e17975e712a820f",
        "address": "0xfcA5cc20A00D8acf04D0C1793C94D01D3ab07D48",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x9cbcc03876e42adac75808488f1f174f74e4679260cc71845fcf4ccbdb2c7db0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 978658,
        "transactionHash": "0x3285ca114d300306af8a022ad2a2682e0c4b1aad8c55da8f1e17975e712a820f",
        "address": "0xfcA5cc20A00D8acf04D0C1793C94D01D3ab07D48",
        "topics": [
          "0x1030152fe2062b574a830e6b9f13c65995990df31e4dc708d142533bb3ad0f52"
        ],
        "data": "0x000000000000000000000000a61d81e1ea21b75c2cb05108ecefcbf827273d54",
        "logIndex": 2,
        "blockHash": "0x9cbcc03876e42adac75808488f1f174f74e4679260cc71845fcf4ccbdb2c7db0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 978658,
        "transactionHash": "0x3285ca114d300306af8a022ad2a2682e0c4b1aad8c55da8f1e17975e712a820f",
        "address": "0xfcA5cc20A00D8acf04D0C1793C94D01D3ab07D48",
        "topics": [
          "0x5874b2072ff37562df54063dd700c59d45f311bdf6f9cabb5a15f0ffb2e9f622"
        ],
        "data": "0x00000000000000000000000025ea4ba2e0011b201d06662170d5115fa57f57870000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 3,
        "blockHash": "0x9cbcc03876e42adac75808488f1f174f74e4679260cc71845fcf4ccbdb2c7db0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 978658,
        "transactionHash": "0x3285ca114d300306af8a022ad2a2682e0c4b1aad8c55da8f1e17975e712a820f",
        "address": "0xfcA5cc20A00D8acf04D0C1793C94D01D3ab07D48",
        "topics": [
          "0xff88af5d962d47fd25d87755e8267a029fad5a91740c67d0dade2bdbe5268a1d"
        ],
        "data": "0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 4,
        "blockHash": "0x9cbcc03876e42adac75808488f1f174f74e4679260cc71845fcf4ccbdb2c7db0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 978658,
        "transactionHash": "0x3285ca114d300306af8a022ad2a2682e0c4b1aad8c55da8f1e17975e712a820f",
        "address": "0xfcA5cc20A00D8acf04D0C1793C94D01D3ab07D48",
        "topics": [
          "0xff88af5d962d47fd25d87755e8267a029fad5a91740c67d0dade2bdbe5268a1d"
        ],
        "data": "0x0000000000000000000000004200000000000000000000000000000000000006",
        "logIndex": 5,
        "blockHash": "0x9cbcc03876e42adac75808488f1f174f74e4679260cc71845fcf4ccbdb2c7db0"
      }
    ],
    "blockNumber": 978658,
    "cumulativeGasUsed": "5207680",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA61d81e1EA21b75c2cB05108ECeFcbF827273D54",
    [
      "0x25Ea4bA2E0011B201D06662170d5115fa57F5787"
    ],
    [
      "0"
    ],
    [
      "0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF",
      "0x4200000000000000000000000000000000000006"
    ],
    "0x4200000000000000000000000000000000000006"
  ],
  "solcInputHash": "15371235cf6d698811a835e9573c38a7",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6-ci.2021.5.11+ovm+commit.3b061308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract MultiWrapper\",\"name\":\"_multiWrapper\",\"type\":\"address\"},{\"internalType\":\"contract IOracle[]\",\"name\":\"existingOracles\",\"type\":\"address[]\"},{\"internalType\":\"enum OffchainOracle.OracleType[]\",\"name\":\"oracleTypes\",\"type\":\"uint8[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"existingConnectors\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"wBase\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"ConnectorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"ConnectorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract MultiWrapper\",\"name\":\"multiWrapper\",\"type\":\"address\"}],\"name\":\"MultiWrapperUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum OffchainOracle.OracleType\",\"name\":\"oracleType\",\"type\":\"uint8\"}],\"name\":\"OracleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum OffchainOracle.OracleType\",\"name\":\"oracleType\",\"type\":\"uint8\"}],\"name\":\"OracleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"addConnector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"enum OffchainOracle.OracleType\",\"name\":\"oracleKind\",\"type\":\"uint8\"}],\"name\":\"addOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectors\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"allConnectors\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useWrappers\",\"type\":\"bool\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weightedRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useSrcWrappers\",\"type\":\"bool\"}],\"name\":\"getRateToEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weightedRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiWrapper\",\"outputs\":[{\"internalType\":\"contract MultiWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracles\",\"outputs\":[{\"internalType\":\"contract IOracle[]\",\"name\":\"allOracles\",\"type\":\"address[]\"},{\"internalType\":\"enum OffchainOracle.OracleType[]\",\"name\":\"oracleTypes\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"removeConnector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"enum OffchainOracle.OracleType\",\"name\":\"oracleKind\",\"type\":\"uint8\"}],\"name\":\"removeOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MultiWrapper\",\"name\":\"_multiWrapper\",\"type\":\"address\"}],\"name\":\"setMultiWrapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRateToEth(address,bool)\":{\"details\":\"Same as `getRate` but checks against `ETH` and `WETH` only\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OffchainOracle.sol\":\"OffchainOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x549c5343ad9f7e3f38aa4c4761854403502574bbc15b822db2ce892ff9b79da7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x9a2c1eebb65250f0e11882237038600f22a62376f0547db4acc0dfe0a3d8d34f\",\"license\":\"MIT\"},\"contracts/MultiWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/IWrapper.sol\\\";\\n\\n\\ncontract MultiWrapper is Ownable {\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    event WrapperAdded(IWrapper connector);\\n    event WrapperRemoved(IWrapper connector);\\n\\n    EnumerableSet.AddressSet private _wrappers;\\n\\n    constructor(IWrapper[] memory existingWrappers) {\\n        for (uint256 i = 0; i < existingWrappers.length; i++) {\\n            require(_wrappers.add(address(existingWrappers[i])), \\\"Wrapper already added\\\");\\n            emit WrapperAdded(existingWrappers[i]);\\n        }\\n    }\\n\\n    function wrappers() external view returns (IWrapper[] memory allWrappers) {\\n        allWrappers = new IWrapper[](_wrappers.length());\\n        for (uint256 i = 0; i < allWrappers.length; i++) {\\n            allWrappers[i] = IWrapper(uint256(_wrappers._inner._values[i]));\\n        }\\n    }\\n\\n    function addWrapper(IWrapper wrapper) external onlyOwner {\\n        require(_wrappers.add(address(wrapper)), \\\"Wrapper already added\\\");\\n        emit WrapperAdded(wrapper);\\n    }\\n\\n    function removeWrapper(IWrapper wrapper) external onlyOwner {\\n        require(_wrappers.remove(address(wrapper)), \\\"Unknown wrapper\\\");\\n        emit WrapperRemoved(wrapper);\\n    }\\n\\n    function getWrappedTokens(IERC20 token) external view returns (IERC20[] memory wrappedTokens, uint256[] memory rates) {\\n        IERC20[] memory memWrappedTokens = new IERC20[](20);\\n        uint256[] memory memRates = new uint256[](20);\\n        uint256 len = 0;\\n        for (uint256 i = 0; i < _wrappers._inner._values.length; i++) {\\n            try IWrapper(uint256(_wrappers._inner._values[i])).wrap(token) returns (IERC20 wrappedToken, uint256 rate) {\\n                memWrappedTokens[len] = wrappedToken;\\n                memRates[len] = rate;\\n                len += 1;\\n                for (uint256 j = 0; j < _wrappers._inner._values.length; j++) {\\n                    if (i != j) {\\n                        try IWrapper(uint256(_wrappers._inner._values[j])).wrap(wrappedToken) returns (IERC20 wrappedToken2, uint256 rate2) {\\n                            bool used = false;\\n                            for (uint256 k = 0; k < len; k++) {\\n                                if (wrappedToken2 == memWrappedTokens[k]) {\\n                                    used = true;\\n                                    break;\\n                                }\\n                            }\\n                            if (!used) {\\n                                memWrappedTokens[len] = wrappedToken2;\\n                                memRates[len] = rate.mul(rate2).div(1e18);\\n                                len += 1;\\n                            }\\n                        } catch { continue; }\\n                    }\\n                }\\n            } catch { continue; }\\n        }\\n        wrappedTokens = new IERC20[](len + 1);\\n        rates = new uint256[](len + 1);\\n        for (uint256 i = 0; i < len; i++) {\\n            wrappedTokens[i] = memWrappedTokens[i];\\n            rates[i] = memRates[i];\\n        }\\n        wrappedTokens[len] = token;\\n        rates[len] = 1e18;\\n    }\\n}\\n\",\"keccak256\":\"0xa1ca090fd1aae6d9089b36e8e470070a3a5849f8e628af8209ccfb87d94ca777\",\"license\":\"MIT\"},\"contracts/OffchainOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./interfaces/IWrapper.sol\\\";\\nimport \\\"./MultiWrapper.sol\\\";\\n\\ncontract OffchainOracle is Ownable {\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    enum OracleType { WETH, ETH, WETH_ETH }\\n\\n    event OracleAdded(IOracle oracle, OracleType oracleType);\\n    event OracleRemoved(IOracle oracle, OracleType oracleType);\\n    event ConnectorAdded(IERC20 connector);\\n    event ConnectorRemoved(IERC20 connector);\\n    event MultiWrapperUpdated(MultiWrapper multiWrapper);\\n\\n    EnumerableSet.AddressSet private _wethOracles;\\n    EnumerableSet.AddressSet private _ethOracles;\\n    EnumerableSet.AddressSet private _connectors;\\n    MultiWrapper public multiWrapper;\\n\\n    IERC20 private constant _BASE = IERC20(0x0000000000000000000000000000000000000000);\\n    IERC20 private immutable _wBase;\\n\\n    constructor(MultiWrapper _multiWrapper, IOracle[] memory existingOracles, OracleType[] memory oracleTypes, IERC20[] memory existingConnectors, IERC20 wBase) {\\n        require(existingOracles.length == oracleTypes.length, \\\"Arrays length mismatch\\\");\\n        multiWrapper = _multiWrapper;\\n        emit MultiWrapperUpdated(_multiWrapper);\\n        for (uint256 i = 0; i < existingOracles.length; i++) {\\n            if (oracleTypes[i] == OracleType.WETH) {\\n                require(_wethOracles.add(address(existingOracles[i])), \\\"Oracle already added\\\");\\n            } else if (oracleTypes[i] == OracleType.ETH) {\\n                require(_ethOracles.add(address(existingOracles[i])), \\\"Oracle already added\\\");\\n            } else if (oracleTypes[i] == OracleType.WETH_ETH) {\\n                require(_wethOracles.add(address(existingOracles[i])), \\\"Oracle already added\\\");\\n                require(_ethOracles.add(address(existingOracles[i])), \\\"Oracle already added\\\");\\n            } else {\\n                revert(\\\"Invalid OracleTokenKind\\\");\\n            }\\n            emit OracleAdded(existingOracles[i], oracleTypes[i]);\\n        }\\n        for (uint256 i = 0; i < existingConnectors.length; i++) {\\n            require(_connectors.add(address(existingConnectors[i])), \\\"Connector already added\\\");\\n            emit ConnectorAdded(existingConnectors[i]);\\n        }\\n        _wBase = wBase;\\n    }\\n\\n    function oracles() public view returns (IOracle[] memory allOracles, OracleType[] memory oracleTypes) {\\n        IOracle[] memory oraclesBuffer = new IOracle[](_wethOracles._inner._values.length + _ethOracles._inner._values.length);\\n        OracleType[] memory oracleTypesBuffer = new OracleType[](oraclesBuffer.length);\\n        for (uint256 i = 0; i < _wethOracles._inner._values.length; i++) {\\n            oraclesBuffer[i] = IOracle(uint256(_wethOracles._inner._values[i]));\\n            oracleTypesBuffer[i] = OracleType.WETH;\\n        }\\n\\n        uint256 actualItemsCount = _wethOracles._inner._values.length;\\n\\n        for (uint256 i = 0; i < _ethOracles._inner._values.length; i++) {\\n            OracleType kind = OracleType.ETH;\\n            uint256 oracleIndex = actualItemsCount;\\n            IOracle oracle = IOracle(uint256(_ethOracles._inner._values[i]));\\n            for (uint j = 0; j < oraclesBuffer.length; j++) {\\n                if (oraclesBuffer[j] == oracle) {\\n                    oracleIndex = j;\\n                    kind = OracleType.WETH_ETH;\\n                    break;\\n                }\\n            }\\n            if (kind == OracleType.ETH) {\\n                actualItemsCount++;\\n            }\\n            oraclesBuffer[oracleIndex] = oracle;\\n            oracleTypesBuffer[oracleIndex] = kind;\\n        }\\n\\n        allOracles = new IOracle[](actualItemsCount);\\n        oracleTypes = new OracleType[](actualItemsCount);\\n        for (uint256 i = 0; i < actualItemsCount; i++) {\\n            allOracles[i] = oraclesBuffer[i];\\n            oracleTypes[i] = oracleTypesBuffer[i];\\n        }\\n    }\\n\\n    function connectors() external view returns (IERC20[] memory allConnectors) {\\n        allConnectors = new IERC20[](_connectors.length());\\n        for (uint256 i = 0; i < allConnectors.length; i++) {\\n            allConnectors[i] = IERC20(uint256(_connectors._inner._values[i]));\\n        }\\n    }\\n\\n    function setMultiWrapper(MultiWrapper _multiWrapper) external onlyOwner {\\n        multiWrapper = _multiWrapper;\\n        emit MultiWrapperUpdated(_multiWrapper);\\n    }\\n\\n    function addOracle(IOracle oracle, OracleType oracleKind) external onlyOwner {\\n        if (oracleKind == OracleType.WETH) {\\n            require(_wethOracles.add(address(oracle)), \\\"Oracle already added\\\");\\n        } else if (oracleKind == OracleType.ETH) {\\n            require(_ethOracles.add(address(oracle)), \\\"Oracle already added\\\");\\n        } else if (oracleKind == OracleType.WETH_ETH) {\\n            require(_wethOracles.add(address(oracle)), \\\"Oracle already added\\\");\\n            require(_ethOracles.add(address(oracle)), \\\"Oracle already added\\\");\\n        } else {\\n            revert(\\\"Invalid OracleTokenKind\\\");\\n        }\\n        emit OracleAdded(oracle, oracleKind);\\n    }\\n\\n    function removeOracle(IOracle oracle, OracleType oracleKind) external onlyOwner {\\n        if (oracleKind == OracleType.WETH) {\\n            require(_wethOracles.remove(address(oracle)), \\\"Unknown oracle\\\");\\n        } else if (oracleKind == OracleType.ETH) {\\n            require(_ethOracles.remove(address(oracle)), \\\"Unknown oracle\\\");\\n        } else if (oracleKind == OracleType.WETH_ETH) {\\n            require(_wethOracles.remove(address(oracle)), \\\"Unknown oracle\\\");\\n            require(_ethOracles.remove(address(oracle)), \\\"Unknown oracle\\\");\\n        } else {\\n            revert(\\\"Invalid OracleTokenKind\\\");\\n        }\\n        emit OracleRemoved(oracle, oracleKind);\\n    }\\n\\n    function addConnector(IERC20 connector) external onlyOwner {\\n        require(_connectors.add(address(connector)), \\\"Connector already added\\\");\\n        emit ConnectorAdded(connector);\\n    }\\n\\n    function removeConnector(IERC20 connector) external onlyOwner {\\n        require(_connectors.remove(address(connector)), \\\"Unknown connector\\\");\\n        emit ConnectorRemoved(connector);\\n    }\\n\\n    /*\\n        WARNING!\\n        Usage of the dex oracle on chain is highly discouraged!\\n        getRate function can be easily manipulated inside transaction!\\n    */\\n    function getRate(IERC20 srcToken, IERC20 dstToken, bool useWrappers) external view returns (uint256 weightedRate) {\\n        require(srcToken != dstToken, \\\"Tokens should not be the same\\\");\\n        uint256 totalWeight;\\n        (IOracle[] memory allOracles, ) = oracles();\\n        (IERC20[] memory wrappedSrcTokens, uint256[] memory srcRates) = _getWrappedTokens(srcToken, useWrappers);\\n        (IERC20[] memory wrappedDstTokens, uint256[] memory dstRates) = _getWrappedTokens(dstToken, useWrappers);\\n        bytes32[] memory connectors_ = _connectors._inner._values;\\n\\n        for (uint256 k1 = 0; k1 < wrappedSrcTokens.length; k1++) {\\n            for (uint256 k2 = 0; k2 < wrappedDstTokens.length; k2++) {\\n                if (wrappedSrcTokens[k1] == wrappedDstTokens[k2]) {\\n                    return srcRates[k1].mul(dstRates[k2]).div(1e18);\\n                }\\n                for (uint256 j = 0; j < connectors_.length; j++) {\\n                    if (IERC20(uint256(connectors_[j])) == wrappedSrcTokens[k1] || IERC20(uint256(connectors_[j])) == wrappedDstTokens[k2]) {\\n                        continue;\\n                    }\\n                    for (uint256 i = 0; i < allOracles.length; i++) {\\n                        try allOracles[i].getRate(wrappedSrcTokens[k1], wrappedDstTokens[k2], IERC20(uint256(connectors_[j]))) returns (uint256 rate, uint256 weight) {\\n                            rate = rate.mul(srcRates[k1]).mul(dstRates[k2]).div(1e36);\\n                            weight = weight.mul(weight);\\n                            weightedRate = weightedRate.add(rate.mul(weight));\\n                            totalWeight = totalWeight.add(weight);\\n                        } catch {}  // solhint-disable-line no-empty-blocks\\n                    }\\n                }\\n            }\\n        }\\n        if (totalWeight > 0) {\\n            weightedRate = weightedRate.div(totalWeight);\\n        }\\n    }\\n\\n    /// @dev Same as `getRate` but checks against `ETH` and `WETH` only\\n    function getRateToEth(IERC20 srcToken, bool useSrcWrappers) external view returns (uint256 weightedRate) {\\n        uint256 totalWeight;\\n        (IERC20[] memory wrappedSrcTokens, uint256[] memory srcRates) = _getWrappedTokens(srcToken, useSrcWrappers);\\n        IERC20[2] memory wrappedDstTokens = [_BASE, _wBase];\\n        bytes32[][2] memory wrappedOracles = [_ethOracles._inner._values, _wethOracles._inner._values];\\n        bytes32[] memory connectors_ = _connectors._inner._values;\\n\\n        for (uint256 k1 = 0; k1 < wrappedSrcTokens.length; k1++) {\\n            for (uint256 k2 = 0; k2 < wrappedDstTokens.length; k2++) {\\n                if (wrappedSrcTokens[k1] == wrappedDstTokens[k2]) {\\n                    return srcRates[k1];\\n                }\\n                for (uint256 j = 0; j < connectors_.length; j++) {\\n                    IERC20 connector = IERC20(uint256(connectors_[j]));\\n                    if (connector == wrappedSrcTokens[k1] || connector == wrappedDstTokens[k2]) {\\n                        continue;\\n                    }\\n                    for (uint256 i = 0; i < wrappedOracles[k2].length; i++) {\\n                        try IOracle(uint256(wrappedOracles[k2][i])).getRate(wrappedSrcTokens[k1], wrappedDstTokens[k2], connector) returns (uint256 rate, uint256 weight) {\\n                            rate = rate.mul(srcRates[k1]).div(1e18);\\n                            weight = weight.mul(weight);\\n                            weightedRate = weightedRate.add(rate.mul(weight));\\n                            totalWeight = totalWeight.add(weight);\\n                        } catch {}  // solhint-disable-line no-empty-blocks\\n                    }\\n                }\\n            }\\n        }\\n        if (totalWeight > 0) {\\n            weightedRate = weightedRate.div(totalWeight);\\n        }\\n    }\\n\\n    function _getWrappedTokens(IERC20 token, bool useWrappers) internal view returns (IERC20[] memory wrappedTokens, uint256[] memory rates) {\\n        if (useWrappers) {\\n            return multiWrapper.getWrappedTokens(token);\\n        }\\n\\n        wrappedTokens = new IERC20[](1);\\n        wrappedTokens[0] = token;\\n        rates = new uint256[](1);\\n        rates[0] = uint256(1e18);\\n    }\\n}\\n\",\"keccak256\":\"0x88c250fe6ead985e6e350516c367e2ad46cda4bd08200986cb577d7392f91389\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IOracle {\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external view returns (uint256 rate, uint256 weight);\\n}\\n\",\"keccak256\":\"0x108abc1d8fff266112dbbc6838ae1439af64aa4fd2a13aacb3e974f6b5690f15\",\"license\":\"MIT\"},\"contracts/interfaces/IWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IWrapper {\\n    function wrap(IERC20 token) external view returns (IERC20 wrappedToken, uint256 rate);\\n}\\n\",\"keccak256\":\"0x91c31c0d6a88c3d9316c86a5d675a4627a5a1bdd039c74550554516ea09909de\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040525a6200000f62000867565b8015620000265760008062000023620008c3565b50505b506040516200353238038062003532833981810160405260a0811015620000575760008062000054620008c3565b50505b810190808051929190602001805160405193929190846401000000008211156200008b5760008062000088620008c3565b50505b908301906020820185811115620000ac57600080620000a9620008c3565b50505b8251866020820283011164010000000082111715620000d557600080620000d2620008c3565b50505b825250602001908051906020019060200280838360005b8381101562000106578082015183820152602001620000ec565b50505050905001604052602001805160405193929190846401000000008211156200013b5760008062000138620008c3565b50505b9083019060208201858111156200015c5760008062000159620008c3565b50505b8251866020820283011164010000000082111715620001855760008062000182620008c3565b50505b825250602001908051906020019060200280838360005b83811015620001b65780820151838201526020016200019c565b5050505090500160405260200180516040519392919084640100000000821115620001eb57600080620001e8620008c3565b50505b9083019060208201858111156200020c5760008062000209620008c3565b50505b8251866020820283011164010000000082111715620002355760008062000232620008c3565b50505b825250602001908051906020019060200280838360005b83811015620002665780820151838201526020016200024c565b50505050905001604052602001805192506000915062000287905062000782565b90508060006001816200029962000930565b816001600160a01b0302191690836001600160a01b0316021790620002bd6200097d565b5050506001600160a01b03811660007f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35082518451146200035a5760405162461bcd60e51b815260206004820152601660248201527f417272617973206c656e677468206d69736d617463680000000000000000000060448201526064016040518091039062000357620008c3565b50505b8460076001816200036a62000930565b816001600160a01b0302191690836001600160a01b03160217906200038e6200097d565b5050507f1030152fe2062b574a830e6b9f13c65995990df31e4dc708d142533bb3ad0f52856040516001600160a01b03909116815260200160405180910390a160005b845181101562000673576000848281518110620003ea57fe5b60200260200101516002811115620003fe57fe5b14156200049657620004348582815181106200041657fe5b602002602001015160016200079460201b620020a91790919060201c565b620004905760405162461bcd60e51b815260206004820152601460248201527f4f7261636c6520616c72656164792061646465640000000000000000000000006044820152606401604051809103906200048d620008c3565b50505b620005ee565b6001848281518110620004a557fe5b60200260200101516002811115620004b957fe5b1415620004ef5762000434858281518110620004d157fe5b602002602001015160036200079460201b620020a91790919060201c565b6002848281518110620004fe57fe5b602002602001015160028111156200051257fe5b141562000597576200052a8582815181106200041657fe5b620005865760405162461bcd60e51b815260206004820152601460248201527f4f7261636c6520616c726561647920616464656400000000000000000000000060448201526064016040518091039062000583620008c3565b50505b62000434858281518110620004d157fe5b60405162461bcd60e51b815260206004820152601760248201527f496e76616c6964204f7261636c65546f6b656e4b696e64000000000000000000604482015260640160405180910390620005eb620008c3565b50505b7f5874b2072ff37562df54063dd700c59d45f311bdf6f9cabb5a15f0ffb2e9f6228582815181106200061c57fe5b60200260200101518583815181106200063157fe5b602002602001015160405180836001600160a01b031681526020018260028111156200065957fe5b81526020019250505060405180910390a1600101620003d1565b5060005b82518110156200076657620006b08382815181106200069257fe5b602002602001015160056200079460201b620020a91790919060201c565b6200070c5760405162461bcd60e51b815260206004820152601760248201527f436f6e6e6563746f7220616c726561647920616464656400000000000000000060448201526064016040518091039062000709620008c3565b50505b7fff88af5d962d47fd25d87755e8267a029fad5a91740c67d0dade2bdbe5268a1d8382815181106200073a57fe5b60200260200101516040516001600160a01b03909116815260200160405180910390a160010162000677565b5060601b6001600160601b0319166080525062000a1392505050565b60005a6200078f620009cc565b905090565b6000620007ab836001600160a01b038416620007b4565b90505b92915050565b6000620007c2838362000844565b6200083b57818380600181620007d762000930565b018082620007e46200097d565b505060009283526000190191602091502001620008006200097d565b50839050806200080f62000930565b6000848152600186016020529091506040902081906200082e6200097d565b50505060019050620007ae565b506000620007ae565b600081815260018301602052604081206200085e62000930565b15159392505050565b63a8c4c5ec598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015620008be57600082820152602001620008a5565b505050565b632a2a7adb598160e01b8152600481016020815285602082015260005b86811015620008fd578086015182820160400152602001620008e0565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020620008a5565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b600081526020620008a5565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020620008a5565b60805160601c612b0162000a3160003980610c585250612b016000f3fe60806040525a61000d6127e2565b80156100215760008061001e612837565b50505b50600436106100f05760003560e01c80638da5cb5b1161009d578063b77910dc11610077578063b77910dc14610396578063d06265181461039e578063f0b92e40146103da578063f2fde38b1461041f576100f0565b80638da5cb5b146102e45780639d4d7b1c14610315578063aa16d4c01461035a576100f0565b8063715018a6116100ce578063715018a6146102385780637de4fd1014610240578063802431fb14610296576100f0565b80631a6c6a98146100fe5780632857373a1461013c57806365050a68146101dd575b6000806100fb612837565b50505b61013a6004803603602081101561011d5760008061011a612837565b50505b503573ffffffffffffffffffffffffffffffffffffffff1661045b565b005b6101446105d6565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610188578082015183820152602001610170565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156101c75780820151838201526020016101af565b5050505090500194505050505060405180910390f35b6101e5610a00565b60405160208082528190810183818151815260200191508051906020019060200280838360005b8381101561022457808201518382015260200161020c565b505050509050019250505060405180910390f35b61013a610ac7565b6102846004803603604081101561025f5760008061025c612837565b50505b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515610c31565b60405190815260200160405180910390f35b610284600480360360608110156102b5576000806102b2612837565b50505b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013590911690604001351515611129565b6102ec6115fd565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61013a6004803603604081101561033457600080610331612837565b50505b50803573ffffffffffffffffffffffffffffffffffffffff16906020013560ff1661162b565b61013a6004803603602081101561037957600080610376612837565b50505b503573ffffffffffffffffffffffffffffffffffffffff16611901565b6102ec611a7c565b61013a600480360360208110156103bd576000806103ba612837565b50505b503573ffffffffffffffffffffffffffffffffffffffff16611aa8565b61013a600480360360408110156103f9576000806103f6612837565b50505b50803573ffffffffffffffffffffffffffffffffffffffff16906020013560ff16611bf2565b61013a6004803603602081101561043e5760008061043b612837565b50505b503573ffffffffffffffffffffffffffffffffffffffff16611eb3565b6104636120cb565b73ffffffffffffffffffffffffffffffffffffffff166104816115fd565b73ffffffffffffffffffffffffffffffffffffffff161461050b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390610508612837565b50505b6105166005826120db565b610589576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f556e6b6e6f776e20636f6e6e6563746f72000000000000000000000000000000604482015260640160405180910390610586612837565b50505b7f6825b26a0827e9c2ceca01d6289ce4a40e629dc074ec48ea4727d1afbff359f58160405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a150565b60608060006003806105e66128a2565b90506001806105f36128a2565b90500167ffffffffffffffff8111801561061557600080610612612837565b50505b5060405190808252806020026020018201604052801561063f578160200160208202803683370190505b5090506000815167ffffffffffffffff8111801561066557600080610662612837565b50505b5060405190808252806020026020018201604052801561068f578160200160208202803683370190505b50905060005b6001806106a06128a2565b905081101561074e57600181816106b56128a2565b81106106bd57fe5b906000526020600020016106cf6128a2565b8382815181106106db57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600082828151811061072357fe5b6020026020010190600281111561073657fe5b9081600281111561074357fe5b905250600101610695565b50600060018061075c6128a2565b9050905060005b60038061076e6128a2565b90508110156108ad576001826000600384816107886128a2565b811061079057fe5b906000526020600020016107a26128a2565b905060005b875181101561080b578173ffffffffffffffffffffffffffffffffffffffff168882815181106107d357fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415610803578092506002935061080b565b6001016107a7565b50600183600281111561081a57fe5b1415610827576001909401935b8087838151811061083457fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508286838151811061087b57fe5b6020026020010190600281111561088e57fe5b9081600281111561089b57fe5b90525050600190920191506107639050565b508067ffffffffffffffff811180156108ce576000806108cb612837565b50505b506040519080825280602002602001820160405280156108f8578160200160208202803683370190505b5094508067ffffffffffffffff8111801561091b57600080610918612837565b50505b50604051908082528060200260200182016040528015610945578160200160208202803683370190505b50935060005b818110156109f85783818151811061095f57fe5b602002602001015186828151811061097357fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508281815181106109b957fe5b60200260200101518582815181106109cd57fe5b602002602001019060028111156109e057fe5b908160028111156109ed57fe5b90525060010161094b565b505050509091565b6060610a0c60056120fd565b67ffffffffffffffff81118015610a2b57600080610a28612837565b50505b50604051908082528060200260200182016040528015610a55578160200160208202803683370190505b50905060005b8151811015610ac35760058181610a706128a2565b8110610a7857fe5b90600052602060002001610a8a6128a2565b828281518110610a9657fe5b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101610a5b565b5090565b610acf6120cb565b73ffffffffffffffffffffffffffffffffffffffff16610aed6115fd565b73ffffffffffffffffffffffffffffffffffffffff1614610b77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390610b74612837565b50505b60008080610b836128a2565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600080600181610bf06128a2565b8173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790610c2c6128ee565b505050565b600080600080610c418686612108565b9150915060006040516040808201815260008083527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166020840152919250516040808201905280600380610ca96128a2565b806020026020016040519081016040528181529190602083018280610ccc6128a2565b8015610cfe57602002820191906000526020600020905b81610cec6128a2565b81526020019060010190808311610ce3575b5050509183525050602001600180610d146128a2565b806020026020016040519081016040528181529190602083018280610d376128a2565b8015610d6957602002820191906000526020600020905b81610d576128a2565b81526020019060010190808311610d4e575b505050919092525090915060009050600580610d836128a2565b806020026020016040519081016040528181529190602083018280610da66128a2565b8015610dd857602002820191906000526020600020905b81610dc66128a2565b81526020019060010190808311610dbd575b5050505050905060005b85518110156111085760005b60028110156110ff57848160028110610e0357fe5b602002015173ffffffffffffffffffffffffffffffffffffffff16878381518110610e2a57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415610e7157858281518110610e5a57fe5b602002602001015198505050505050505050611123565b60005b83518110156110f6576000848281518110610e8b57fe5b60200260200101519050888481518110610ea157fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480610f1d5750868360028110610ee957fe5b602002015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b15610f2857506110ee565b60005b868460028110610f3757fe5b6020020151518110156110eb57868460028110610f5057fe5b60200201518181518110610f6057fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166314999e798b8781518110610f8f57fe5b60200260200101518a8760028110610fa357fe5b6020020151856040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9384166004820152918316602483015290911660448201526064016040805180830381868061101761293c565b15801561102c57600080611029612837565b50505b505a611036612988565b505050505092505050801561107757506040513d60408110156110615760008061105e612837565b50505b8101908080519291906020018051925060019150505b611080576110e3565b6110b0670de0b6b3a76400006110aa8d8a8151811061109b57fe5b60200260200101518590612453565b906124d5565b91506110bc8180612453565b90506110d26110cb8383612453565b8f9061255e565b9d506110de8d8261255e565b9c5050505b600101610f2b565b50505b600101610e74565b50600101610dee565b50600101610de2565b50851561111c5761111987876124d5565b96505b5050505050505b92915050565b60008273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156111ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f546f6b656e732073686f756c64206e6f74206265207468652073616d650000006044820152606401604051809103906111cb612837565b50505b6000806111d96105d6565b5090506000806111e98887612108565b915091506000806111fa8989612108565b9092509050600060058061120c6128a2565b80602002602001604051908101604052818152919060208301828061122f6128a2565b801561126157602002820191906000526020600020905b8161124f6128a2565b81526020019060010190808311611246575b5050505050905060005b85518110156115da5760005b84518110156115d15784818151811061128c57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168783815181106112b657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16141561132757611317670de0b6b3a76400006110aa8684815181106112f557fe5b602002602001015189868151811061130957fe5b602002602001015190612453565b99505050505050505050506115f6565b60005b83518110156115c85787838151811061133f57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1684828151811061136957fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614806113e4575085828151811061139a57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168482815181106113c457fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16145b156113ee576115c0565b60005b89518110156115be5789818151811061140657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166314999e798a868151811061143557fe5b602002602001015189868151811061144957fe5b602002602001015188868151811061145d57fe5b60200260200101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff938416600482015291831660248301529091166044820152606401604080518083038186806114d361293c565b1580156114e8576000806114e5612837565b50505b505a6114f2612988565b505050505092505050801561153357506040513d604081101561151d5760008061151a612837565b50505b8101908080519291906020018051925060019150505b61153c576115b6565b61158a6ec097ce7bc90715b34b9f10000000006110aa8a888151811061155e57fe5b60200260200101516115848e8b8151811061157557fe5b60200260200101518790612453565b90612453565b91506115968180612453565b90506115a56110cb8383612453565b9d506115b18d8261255e565b9c5050505b6001016113f1565b505b60010161132a565b50600101611277565b5060010161126b565b5086156115ee576115eb88886124d5565b97505b505050505050505b9392505050565b600080806116096128a2565b906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6116336120cb565b73ffffffffffffffffffffffffffffffffffffffff166116516115fd565b73ffffffffffffffffffffffffffffffffffffffff16146116db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401604051809103906116d8612837565b50505b60008160028111156116e957fe5b1415611772576116fa6001836120a9565b61176d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4f7261636c6520616c726561647920616464656400000000000000000000000060448201526064016040518091039061176a612837565b50505b61189d565b600181600281111561178057fe5b1415611791576116fa6003836120a9565b600281600281111561179f57fe5b141561182e576117b06001836120a9565b611823576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4f7261636c6520616c7265616479206164646564000000000000000000000000604482015260640160405180910390611820612837565b50505b6116fa6003836120a9565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c6964204f7261636c65546f6b656e4b696e6400000000000000000060448201526064016040518091039061189a612837565b50505b7f5874b2072ff37562df54063dd700c59d45f311bdf6f9cabb5a15f0ffb2e9f6228282604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018260028111156118ec57fe5b81526020019250505060405180910390a15050565b6119096120cb565b73ffffffffffffffffffffffffffffffffffffffff166119276115fd565b73ffffffffffffffffffffffffffffffffffffffff16146119b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401604051809103906119ae612837565b50505b6119bc6005826120a9565b611a2f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f436f6e6e6563746f7220616c7265616479206164646564000000000000000000604482015260640160405180910390611a2c612837565b50505b7fff88af5d962d47fd25d87755e8267a029fad5a91740c67d0dade2bdbe5268a1d8160405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a150565b60006007611a886128a2565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611ab06120cb565b73ffffffffffffffffffffffffffffffffffffffff16611ace6115fd565b73ffffffffffffffffffffffffffffffffffffffff1614611b58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390611b55612837565b50505b806007600181611b666128a2565b8173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790611ba26128ee565b5050507f1030152fe2062b574a830e6b9f13c65995990df31e4dc708d142533bb3ad0f528160405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a150565b611bfa6120cb565b73ffffffffffffffffffffffffffffffffffffffff16611c186115fd565b73ffffffffffffffffffffffffffffffffffffffff1614611ca2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390611c9f612837565b50505b6000816002811115611cb057fe5b1415611d3957611cc16001836120db565b611d34576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f556e6b6e6f776e206f7261636c65000000000000000000000000000000000000604482015260640160405180910390611d31612837565b50505b611e64565b6001816002811115611d4757fe5b1415611d5857611cc16003836120db565b6002816002811115611d6657fe5b1415611df557611d776001836120db565b611dea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f556e6b6e6f776e206f7261636c65000000000000000000000000000000000000604482015260640160405180910390611de7612837565b50505b611cc16003836120db565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c6964204f7261636c65546f6b656e4b696e64000000000000000000604482015260640160405180910390611e61612837565b50505b7f7a7f56716fe703fb190529c336e57df71ab88188ba47e8d786bac684b61ab9a68282604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018260028111156118ec57fe5b611ebb6120cb565b73ffffffffffffffffffffffffffffffffffffffff16611ed96115fd565b73ffffffffffffffffffffffffffffffffffffffff1614611f63576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390611f60612837565b50505b73ffffffffffffffffffffffffffffffffffffffff8116611fd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180612aba6026913960400191505060405180910390611fd5612837565b50505b8073ffffffffffffffffffffffffffffffffffffffff16600080611ffa6128a2565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a38060006001816120676128a2565b8173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217906120a36128ee565b50505050565b60006115f68373ffffffffffffffffffffffffffffffffffffffff84166125d7565b60005a6120d6612a73565b905090565b60006115f68373ffffffffffffffffffffffffffffffffffffffff8416612676565b6000611123826127b5565b606080821561239a576000600761211d6128a2565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cb991d94856040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260240160006040518083038186806121b561293c565b1580156121ca576000806121c7612837565b50505b505a6121d4612988565b50505050501580156121f3573d6000803e3d60006121f0612837565b50505b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604090815281101561224357600080612240612837565b50505b810190808051604051939291908464010000000082111561226c57600080612269612837565b50505b90830190602082018581111561228a57600080612287612837565b50505b82518660208202830111640100000000821117156122b0576000806122ad612837565b50505b825250602001908051906020019060200280838360005b838110156122df5780820151838201526020016122c7565b50505050905001604052602001805160405193929190846401000000008211156123115760008061230e612837565b50505b90830190602082018581111561232f5760008061232c612837565b50505b825186602082028301116401000000008211171561235557600080612352612837565b50505b825250602001908051906020019060200280838360005b8381101561238457808201518382015260200161236c565b505050509050016040525050509150915061244c565b60016040519080825280602002602001820160405280156123c5578160200160208202803683370190505b50915083826000815181106123d657fe5b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526001604051908082528060200260200182016040528015612426578160200160208202803683370190505b509050670de0b6b3a76400008160008151811061243f57fe5b6020026020010181815250505b9250929050565b60008261246257506000611123565b8282028284828161246f57fe5b04146115f6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180612ae060219139604001915050604051809103906124cc612837565b50509392505050565b600080821161254d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f00000000000060448201526064016040518091039061254a612837565b50505b81838161255657fe5b049392505050565b6000828201838110156115f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401604051809103906124cc612837565b60006125e383836127c1565b61266e578183806001816125f56128a2565b0180826126006128ee565b505060009283527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01916020915020016126386128ee565b50839050806126456128a2565b6000848152600186016020529091506040902081906126626128ee565b50505060019050611123565b506000611123565b600081815260018301602052806040812061268f6128a2565b905080156127ab577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81016000600186806126c86128a2565b905003905060008660000182816126dd6128a2565b81106126e557fe5b906000526020600020016126f76128a2565b9050808784816127056128a2565b811061270d57fe5b9060005260206000200181906127216128ee565b505050600081815260018881016020528401906040902081906127426128ee565b50505086600001806127526128a2565b8061275957fe5b600190038181906000526020600020016000906127746128ee565b50509061277f6128ee565b50506000868152600188016020526040902060009061279c6128ee565b50506001945050505050611123565b6000915050611123565b600081806115f66128a2565b600081815260018301602052604081206127d96128a2565b15159392505050565b63a8c4c5ec598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015610c2c57600082820152602001612820565b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101561286f578086015182820160400152602001612854565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020612820565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b600081526020612820565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020612820565b638540661f598160e01b81526129b9565b8080831115611123575090919050565b8080831015611123575090919050565b836004820152846024820152606060448201528660648201526084810160005b888110156129f15780880151828201526020016129d9565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af15059612a468d3d6129a9565b8c01612a528187612999565b5b82811015612a675760008152602001612a53565b50929c50505050505050565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051600082529350602061282056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
  "deployedBytecode": "0x60806040525a61000d6127e2565b80156100215760008061001e612837565b50505b50600436106100f05760003560e01c80638da5cb5b1161009d578063b77910dc11610077578063b77910dc14610396578063d06265181461039e578063f0b92e40146103da578063f2fde38b1461041f576100f0565b80638da5cb5b146102e45780639d4d7b1c14610315578063aa16d4c01461035a576100f0565b8063715018a6116100ce578063715018a6146102385780637de4fd1014610240578063802431fb14610296576100f0565b80631a6c6a98146100fe5780632857373a1461013c57806365050a68146101dd575b6000806100fb612837565b50505b61013a6004803603602081101561011d5760008061011a612837565b50505b503573ffffffffffffffffffffffffffffffffffffffff1661045b565b005b6101446105d6565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610188578082015183820152602001610170565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156101c75780820151838201526020016101af565b5050505090500194505050505060405180910390f35b6101e5610a00565b60405160208082528190810183818151815260200191508051906020019060200280838360005b8381101561022457808201518382015260200161020c565b505050509050019250505060405180910390f35b61013a610ac7565b6102846004803603604081101561025f5760008061025c612837565b50505b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515610c31565b60405190815260200160405180910390f35b610284600480360360608110156102b5576000806102b2612837565b50505b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013590911690604001351515611129565b6102ec6115fd565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61013a6004803603604081101561033457600080610331612837565b50505b50803573ffffffffffffffffffffffffffffffffffffffff16906020013560ff1661162b565b61013a6004803603602081101561037957600080610376612837565b50505b503573ffffffffffffffffffffffffffffffffffffffff16611901565b6102ec611a7c565b61013a600480360360208110156103bd576000806103ba612837565b50505b503573ffffffffffffffffffffffffffffffffffffffff16611aa8565b61013a600480360360408110156103f9576000806103f6612837565b50505b50803573ffffffffffffffffffffffffffffffffffffffff16906020013560ff16611bf2565b61013a6004803603602081101561043e5760008061043b612837565b50505b503573ffffffffffffffffffffffffffffffffffffffff16611eb3565b6104636120cb565b73ffffffffffffffffffffffffffffffffffffffff166104816115fd565b73ffffffffffffffffffffffffffffffffffffffff161461050b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390610508612837565b50505b6105166005826120db565b610589576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f556e6b6e6f776e20636f6e6e6563746f72000000000000000000000000000000604482015260640160405180910390610586612837565b50505b7f6825b26a0827e9c2ceca01d6289ce4a40e629dc074ec48ea4727d1afbff359f58160405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a150565b60608060006003806105e66128a2565b90506001806105f36128a2565b90500167ffffffffffffffff8111801561061557600080610612612837565b50505b5060405190808252806020026020018201604052801561063f578160200160208202803683370190505b5090506000815167ffffffffffffffff8111801561066557600080610662612837565b50505b5060405190808252806020026020018201604052801561068f578160200160208202803683370190505b50905060005b6001806106a06128a2565b905081101561074e57600181816106b56128a2565b81106106bd57fe5b906000526020600020016106cf6128a2565b8382815181106106db57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600082828151811061072357fe5b6020026020010190600281111561073657fe5b9081600281111561074357fe5b905250600101610695565b50600060018061075c6128a2565b9050905060005b60038061076e6128a2565b90508110156108ad576001826000600384816107886128a2565b811061079057fe5b906000526020600020016107a26128a2565b905060005b875181101561080b578173ffffffffffffffffffffffffffffffffffffffff168882815181106107d357fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415610803578092506002935061080b565b6001016107a7565b50600183600281111561081a57fe5b1415610827576001909401935b8087838151811061083457fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508286838151811061087b57fe5b6020026020010190600281111561088e57fe5b9081600281111561089b57fe5b90525050600190920191506107639050565b508067ffffffffffffffff811180156108ce576000806108cb612837565b50505b506040519080825280602002602001820160405280156108f8578160200160208202803683370190505b5094508067ffffffffffffffff8111801561091b57600080610918612837565b50505b50604051908082528060200260200182016040528015610945578160200160208202803683370190505b50935060005b818110156109f85783818151811061095f57fe5b602002602001015186828151811061097357fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508281815181106109b957fe5b60200260200101518582815181106109cd57fe5b602002602001019060028111156109e057fe5b908160028111156109ed57fe5b90525060010161094b565b505050509091565b6060610a0c60056120fd565b67ffffffffffffffff81118015610a2b57600080610a28612837565b50505b50604051908082528060200260200182016040528015610a55578160200160208202803683370190505b50905060005b8151811015610ac35760058181610a706128a2565b8110610a7857fe5b90600052602060002001610a8a6128a2565b828281518110610a9657fe5b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101610a5b565b5090565b610acf6120cb565b73ffffffffffffffffffffffffffffffffffffffff16610aed6115fd565b73ffffffffffffffffffffffffffffffffffffffff1614610b77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390610b74612837565b50505b60008080610b836128a2565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600080600181610bf06128a2565b8173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790610c2c6128ee565b505050565b600080600080610c418686612108565b9150915060006040516040808201815260008083527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166020840152919250516040808201905280600380610ca96128a2565b806020026020016040519081016040528181529190602083018280610ccc6128a2565b8015610cfe57602002820191906000526020600020905b81610cec6128a2565b81526020019060010190808311610ce3575b5050509183525050602001600180610d146128a2565b806020026020016040519081016040528181529190602083018280610d376128a2565b8015610d6957602002820191906000526020600020905b81610d576128a2565b81526020019060010190808311610d4e575b505050919092525090915060009050600580610d836128a2565b806020026020016040519081016040528181529190602083018280610da66128a2565b8015610dd857602002820191906000526020600020905b81610dc66128a2565b81526020019060010190808311610dbd575b5050505050905060005b85518110156111085760005b60028110156110ff57848160028110610e0357fe5b602002015173ffffffffffffffffffffffffffffffffffffffff16878381518110610e2a57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415610e7157858281518110610e5a57fe5b602002602001015198505050505050505050611123565b60005b83518110156110f6576000848281518110610e8b57fe5b60200260200101519050888481518110610ea157fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480610f1d5750868360028110610ee957fe5b602002015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b15610f2857506110ee565b60005b868460028110610f3757fe5b6020020151518110156110eb57868460028110610f5057fe5b60200201518181518110610f6057fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166314999e798b8781518110610f8f57fe5b60200260200101518a8760028110610fa357fe5b6020020151856040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9384166004820152918316602483015290911660448201526064016040805180830381868061101761293c565b15801561102c57600080611029612837565b50505b505a611036612988565b505050505092505050801561107757506040513d60408110156110615760008061105e612837565b50505b8101908080519291906020018051925060019150505b611080576110e3565b6110b0670de0b6b3a76400006110aa8d8a8151811061109b57fe5b60200260200101518590612453565b906124d5565b91506110bc8180612453565b90506110d26110cb8383612453565b8f9061255e565b9d506110de8d8261255e565b9c5050505b600101610f2b565b50505b600101610e74565b50600101610dee565b50600101610de2565b50851561111c5761111987876124d5565b96505b5050505050505b92915050565b60008273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156111ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f546f6b656e732073686f756c64206e6f74206265207468652073616d650000006044820152606401604051809103906111cb612837565b50505b6000806111d96105d6565b5090506000806111e98887612108565b915091506000806111fa8989612108565b9092509050600060058061120c6128a2565b80602002602001604051908101604052818152919060208301828061122f6128a2565b801561126157602002820191906000526020600020905b8161124f6128a2565b81526020019060010190808311611246575b5050505050905060005b85518110156115da5760005b84518110156115d15784818151811061128c57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168783815181106112b657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16141561132757611317670de0b6b3a76400006110aa8684815181106112f557fe5b602002602001015189868151811061130957fe5b602002602001015190612453565b99505050505050505050506115f6565b60005b83518110156115c85787838151811061133f57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1684828151811061136957fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614806113e4575085828151811061139a57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168482815181106113c457fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16145b156113ee576115c0565b60005b89518110156115be5789818151811061140657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166314999e798a868151811061143557fe5b602002602001015189868151811061144957fe5b602002602001015188868151811061145d57fe5b60200260200101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff938416600482015291831660248301529091166044820152606401604080518083038186806114d361293c565b1580156114e8576000806114e5612837565b50505b505a6114f2612988565b505050505092505050801561153357506040513d604081101561151d5760008061151a612837565b50505b8101908080519291906020018051925060019150505b61153c576115b6565b61158a6ec097ce7bc90715b34b9f10000000006110aa8a888151811061155e57fe5b60200260200101516115848e8b8151811061157557fe5b60200260200101518790612453565b90612453565b91506115968180612453565b90506115a56110cb8383612453565b9d506115b18d8261255e565b9c5050505b6001016113f1565b505b60010161132a565b50600101611277565b5060010161126b565b5086156115ee576115eb88886124d5565b97505b505050505050505b9392505050565b600080806116096128a2565b906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6116336120cb565b73ffffffffffffffffffffffffffffffffffffffff166116516115fd565b73ffffffffffffffffffffffffffffffffffffffff16146116db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401604051809103906116d8612837565b50505b60008160028111156116e957fe5b1415611772576116fa6001836120a9565b61176d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4f7261636c6520616c726561647920616464656400000000000000000000000060448201526064016040518091039061176a612837565b50505b61189d565b600181600281111561178057fe5b1415611791576116fa6003836120a9565b600281600281111561179f57fe5b141561182e576117b06001836120a9565b611823576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4f7261636c6520616c7265616479206164646564000000000000000000000000604482015260640160405180910390611820612837565b50505b6116fa6003836120a9565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c6964204f7261636c65546f6b656e4b696e6400000000000000000060448201526064016040518091039061189a612837565b50505b7f5874b2072ff37562df54063dd700c59d45f311bdf6f9cabb5a15f0ffb2e9f6228282604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018260028111156118ec57fe5b81526020019250505060405180910390a15050565b6119096120cb565b73ffffffffffffffffffffffffffffffffffffffff166119276115fd565b73ffffffffffffffffffffffffffffffffffffffff16146119b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401604051809103906119ae612837565b50505b6119bc6005826120a9565b611a2f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f436f6e6e6563746f7220616c7265616479206164646564000000000000000000604482015260640160405180910390611a2c612837565b50505b7fff88af5d962d47fd25d87755e8267a029fad5a91740c67d0dade2bdbe5268a1d8160405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a150565b60006007611a886128a2565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611ab06120cb565b73ffffffffffffffffffffffffffffffffffffffff16611ace6115fd565b73ffffffffffffffffffffffffffffffffffffffff1614611b58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390611b55612837565b50505b806007600181611b666128a2565b8173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790611ba26128ee565b5050507f1030152fe2062b574a830e6b9f13c65995990df31e4dc708d142533bb3ad0f528160405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a150565b611bfa6120cb565b73ffffffffffffffffffffffffffffffffffffffff16611c186115fd565b73ffffffffffffffffffffffffffffffffffffffff1614611ca2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390611c9f612837565b50505b6000816002811115611cb057fe5b1415611d3957611cc16001836120db565b611d34576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f556e6b6e6f776e206f7261636c65000000000000000000000000000000000000604482015260640160405180910390611d31612837565b50505b611e64565b6001816002811115611d4757fe5b1415611d5857611cc16003836120db565b6002816002811115611d6657fe5b1415611df557611d776001836120db565b611dea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f556e6b6e6f776e206f7261636c65000000000000000000000000000000000000604482015260640160405180910390611de7612837565b50505b611cc16003836120db565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c6964204f7261636c65546f6b656e4b696e64000000000000000000604482015260640160405180910390611e61612837565b50505b7f7a7f56716fe703fb190529c336e57df71ab88188ba47e8d786bac684b61ab9a68282604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018260028111156118ec57fe5b611ebb6120cb565b73ffffffffffffffffffffffffffffffffffffffff16611ed96115fd565b73ffffffffffffffffffffffffffffffffffffffff1614611f63576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390611f60612837565b50505b73ffffffffffffffffffffffffffffffffffffffff8116611fd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180612aba6026913960400191505060405180910390611fd5612837565b50505b8073ffffffffffffffffffffffffffffffffffffffff16600080611ffa6128a2565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a38060006001816120676128a2565b8173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217906120a36128ee565b50505050565b60006115f68373ffffffffffffffffffffffffffffffffffffffff84166125d7565b60005a6120d6612a73565b905090565b60006115f68373ffffffffffffffffffffffffffffffffffffffff8416612676565b6000611123826127b5565b606080821561239a576000600761211d6128a2565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cb991d94856040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260240160006040518083038186806121b561293c565b1580156121ca576000806121c7612837565b50505b505a6121d4612988565b50505050501580156121f3573d6000803e3d60006121f0612837565b50505b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604090815281101561224357600080612240612837565b50505b810190808051604051939291908464010000000082111561226c57600080612269612837565b50505b90830190602082018581111561228a57600080612287612837565b50505b82518660208202830111640100000000821117156122b0576000806122ad612837565b50505b825250602001908051906020019060200280838360005b838110156122df5780820151838201526020016122c7565b50505050905001604052602001805160405193929190846401000000008211156123115760008061230e612837565b50505b90830190602082018581111561232f5760008061232c612837565b50505b825186602082028301116401000000008211171561235557600080612352612837565b50505b825250602001908051906020019060200280838360005b8381101561238457808201518382015260200161236c565b505050509050016040525050509150915061244c565b60016040519080825280602002602001820160405280156123c5578160200160208202803683370190505b50915083826000815181106123d657fe5b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526001604051908082528060200260200182016040528015612426578160200160208202803683370190505b509050670de0b6b3a76400008160008151811061243f57fe5b6020026020010181815250505b9250929050565b60008261246257506000611123565b8282028284828161246f57fe5b04146115f6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180612ae060219139604001915050604051809103906124cc612837565b50509392505050565b600080821161254d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f00000000000060448201526064016040518091039061254a612837565b50505b81838161255657fe5b049392505050565b6000828201838110156115f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401604051809103906124cc612837565b60006125e383836127c1565b61266e578183806001816125f56128a2565b0180826126006128ee565b505060009283527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01916020915020016126386128ee565b50839050806126456128a2565b6000848152600186016020529091506040902081906126626128ee565b50505060019050611123565b506000611123565b600081815260018301602052806040812061268f6128a2565b905080156127ab577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81016000600186806126c86128a2565b905003905060008660000182816126dd6128a2565b81106126e557fe5b906000526020600020016126f76128a2565b9050808784816127056128a2565b811061270d57fe5b9060005260206000200181906127216128ee565b505050600081815260018881016020528401906040902081906127426128ee565b50505086600001806127526128a2565b8061275957fe5b600190038181906000526020600020016000906127746128ee565b50509061277f6128ee565b50506000868152600188016020526040902060009061279c6128ee565b50506001945050505050611123565b6000915050611123565b600081806115f66128a2565b600081815260018301602052604081206127d96128a2565b15159392505050565b63a8c4c5ec598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015610c2c57600082820152602001612820565b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101561286f578086015182820160400152602001612854565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020612820565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b600081526020612820565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020612820565b638540661f598160e01b81526129b9565b8080831115611123575090919050565b8080831015611123575090919050565b836004820152846024820152606060448201528660648201526084810160005b888110156129f15780880151828201526020016129d9565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af15059612a468d3d6129a9565b8c01612a528187612999565b5b82811015612a675760008152602001612a53565b50929c50505050505050565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051600082529350602061282056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRateToEth(address,bool)": {
        "details": "Same as `getRate` but checks against `ETH` and `WETH` only"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/OffchainOracle.sol:OffchainOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2307,
        "contract": "contracts/OffchainOracle.sol:OffchainOracle",
        "label": "_wethOracles",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressSet)1640_storage"
      },
      {
        "astId": 2309,
        "contract": "contracts/OffchainOracle.sol:OffchainOracle",
        "label": "_ethOracles",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)1640_storage"
      },
      {
        "astId": 2311,
        "contract": "contracts/OffchainOracle.sol:OffchainOracle",
        "label": "_connectors",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(AddressSet)1640_storage"
      },
      {
        "astId": 2313,
        "contract": "contracts/OffchainOracle.sol:OffchainOracle",
        "label": "multiWrapper",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(MultiWrapper)2261"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(MultiWrapper)2261": {
        "encoding": "inplace",
        "label": "contract MultiWrapper",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1640_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1639,
            "contract": "contracts/OffchainOracle.sol:OffchainOracle",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1375_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1375_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1370,
            "contract": "contracts/OffchainOracle.sol:OffchainOracle",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1374,
            "contract": "contracts/OffchainOracle.sol:OffchainOracle",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}